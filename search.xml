<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Discuz 论坛签到 - 恩山无线论坛</title>
      <link href="/2023/01/16/Discuz%20%E8%AE%BA%E5%9D%9B%E7%AD%BE%E5%88%B0%20-%20%E6%81%A9%E5%B1%B1%E6%97%A0%E7%BA%BF%E8%AE%BA%E5%9D%9B/"/>
      <url>/2023/01/16/Discuz%20%E8%AE%BA%E5%9D%9B%E7%AD%BE%E5%88%B0%20-%20%E6%81%A9%E5%B1%B1%E6%97%A0%E7%BA%BF%E8%AE%BA%E5%9D%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="Discuz-论坛签到-恩山无线论坛"><a href="#Discuz-论坛签到-恩山无线论坛" class="headerlink" title="Discuz 论坛签到 - 恩山无线论坛"></a><code>Discuz</code> 论坛签到 - 恩山无线论坛</h1><h6 id="需要用到-requests库"><a href="#需要用到-requests库" class="headerlink" title="需要用到 requests库"></a>需要用到 <code>requests</code>库</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests -i https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure><h6 id="签到脚本如下"><a href="#签到脚本如下" class="headerlink" title="签到脚本如下"></a>签到脚本如下</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ens</span>(<span class="params">cookie</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.right.com.cn/forum/home.php?mod=spacecp&amp;ac=credit&amp;showcredit=1&amp;forcemobile=1&#x27;</span></span><br><span class="line">    re = requests.Session()</span><br><span class="line">    re.headers.update(&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0&#x27;</span>&#125;)</span><br><span class="line">    re.get(url, timeout=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        re.headers.update(&#123;</span><br><span class="line">            <span class="comment"># 关键 Cookie 格式 &#x27;TWcq_2132_saltkey=xxxx;TWcq_2132_auth=xxxxxxxxxxx;&#x27;</span></span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: cookie</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment"># 访问</span></span><br><span class="line">        re = re.get(url, timeout=<span class="number">120</span>)</span><br><span class="line">        <span class="keyword">if</span> re.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 恩山币数量</span></span><br><span class="line">            ensB = re.text.split(<span class="string">&#x27;恩山币: &lt;/em&gt;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&amp;nbsp; &lt;a&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            log = <span class="string">f&#x27;请求成功\t当前恩山币数量: <span class="subst">&#123;ensB&#125;</span>\n<span class="subst">&#123;datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">            <span class="comment"># 为写日志创建文件夹</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">f&#x27;./Log/enshan&#x27;</span>):</span><br><span class="line">                os.system(<span class="string">f&#x27;mkdir -p ./Log/enshan/&#x27;</span>)</span><br><span class="line">            <span class="comment"># 写入日志文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./Log/enshan/&#x27;</span> + datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) + <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(log)</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">return</span> log</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log = <span class="string">f&#x27;请求出错 响应状态码<span class="subst">&#123;re.status_code&#125;</span>&#x27;</span> \</span><br><span class="line">                  <span class="string">f&#x27;请检查Cookie是否过期 和 检查当前网络是否能正常访问<span class="subst">&#123;url&#125;</span>&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> log</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;程序异常！\n<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 检查网络状态</span></span><br><span class="line">    net = os.system(<span class="string">&#x27;ping www.right.com.cn -n 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> net:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;网络不可达&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(ens(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>有点小粗糙 但是能用 …</p></blockquote><h6 id="需要传递一个参数进去"><a href="#需要传递一个参数进去" class="headerlink" title="需要传递一个参数进去"></a>需要传递一个参数进去</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./xxxx.py &#x27;TWcq_2132_saltkey=xxxx;TWcq_2132_auth=xxxxxxxxxxx;&#x27;</span><br></pre></td></tr></table></figure><p>​**<code>Discuz</code>**的签到方法都差不多，只要传入两个关键的<code>Cookie</code>参数，而且还是<code>get</code>类型的请求，请求页面成功即登录签到</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 签到脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smtplib 邮件发送</title>
      <link href="/2022/09/22/Smtplib%20%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2022/09/22/Smtplib%20%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>​<strong>SMTP</strong>(Simple Mail Transfer Protocol)即<strong>简单邮件传输协议</strong>,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。这里我们就需要用到这个库。其中SMTP支持smtplib和Email两个模块，其中<strong>Smtplib</strong>负责发送邮件，<strong>email</strong>负责构建邮件，SMTP支持发送纯文本，携带附件和携带图片等功能。</p><h4 id="需要用到的库"><a href="#需要用到的库" class="headerlink" title="需要用到的库"></a>需要用到的库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib<span class="comment"># 负责登录</span></span><br><span class="line"><span class="keyword">from</span> email.message <span class="keyword">import</span> EmailMessage<span class="comment"># 负责邮件内容</span></span><br></pre></td></tr></table></figure><h4 id="连接到邮箱服务器-登录邮箱"><a href="#连接到邮箱服务器-登录邮箱" class="headerlink" title="连接到邮箱服务器 登录邮箱"></a>连接到邮箱服务器 登录邮箱</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器，登录邮箱</span></span><br><span class="line">conn = smtplib.SMTP_SSL(<span class="string">&#x27;smtp.88.com&#x27;</span>, <span class="number">465</span>)  <span class="comment"># SSL连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录邮箱</span></span><br><span class="line"><span class="comment"># 连接对象.login(&#x27;账号&#x27;,&#x27;密码&#x27;)</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;xxxxxxxxxx&#x27;</span></span><br><span class="line">conn.login(<span class="string">&#x27;xxxxx@88.com&#x27;</span>, password) </span><br><span class="line"><span class="comment"># 登录成功 &#x27;conn.login&#x27; 是有返回值的可以输出看一下 &quot;(235, b&#x27;Authentication successful&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email.message <span class="keyword">import</span> EmailMessage</span><br><span class="line">....</span><br><span class="line">subject = <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">body = <span class="string">&#x27;邮件内容&#x27;</span></span><br><span class="line"></span><br><span class="line">msg = EmailMessage()</span><br><span class="line">msg[<span class="string">&#x27;subject&#x27;</span>] = subject</span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;发件人&#x27;</span></span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;收件人&#x27;</span></span><br><span class="line">msg.set_content(<span class="string">f&#x27;<span class="subst">&#123;body&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">conn.sendmail(msg[<span class="string">&#x27;From&#x27;</span>], msg[<span class="string">&#x27;To&#x27;</span>], msg.as_string())</span><br></pre></td></tr></table></figure><h4 id="发送完成后断开连接"><a href="#发送完成后断开连接" class="headerlink" title="发送完成后断开连接"></a>发送完成后断开连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure><h4 id="简单发送"><a href="#简单发送" class="headerlink" title="简单发送"></a>简单发送</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.message <span class="keyword">import</span> EmailMessage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器，登录邮箱</span></span><br><span class="line">conn = smtplib.SMTP_SSL(<span class="string">&#x27;smtp.88.com&#x27;</span>, <span class="number">465</span>)  <span class="comment"># SSL连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录邮箱</span></span><br><span class="line"><span class="comment"># 连接对象.login(&#x27;账号&#x27;,&#x27;密码&#x27;)</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;xxxxxxxxxxxx&#x27;</span></span><br><span class="line">conn.login(<span class="string">&#x27;xxxx@88.com&#x27;</span>, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件内容</span></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">msg = EmailMessage()</span><br><span class="line"></span><br><span class="line">subject = <span class="string">&#x27;标题&#x27;</span></span><br><span class="line">body = <span class="string">&#x27;邮件内容&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">msg[<span class="string">&#x27;subject&#x27;</span>] = subject</span><br><span class="line"><span class="comment"># 定义发件人</span></span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;renhang0203@88.com&#x27;</span></span><br><span class="line"><span class="comment"># 定义收件人</span></span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;rskil@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 定义内容</span></span><br><span class="line">msg.set_content(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">conn.sendmail(msg[<span class="string">&#x27;From&#x27;</span>], msg[<span class="string">&#x27;To&#x27;</span>], msg.as_string())</span><br><span class="line"></span><br><span class="line">conn.quit()</span><br></pre></td></tr></table></figure><hr><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://www.bilibili.com/video/BV1Lg4y187ic/">【零基础 Python体验课】第九季 Python自动发送邮件</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Flask 框架开发个人博客</title>
      <link href="/2022/09/08/%E5%9F%BA%E4%BA%8E%20Flask%20%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/09/08/%E5%9F%BA%E4%BA%8E%20Flask%20%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Flask-框架开发个人博客"><a href="#基于-Flask-框架开发个人博客" class="headerlink" title="基于 Flask 框架开发个人博客"></a>基于 Flask 框架开发个人博客</h1><hr><p>[TOC]</p><hr><h4 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask -i https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure><h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Flask版本为:<span class="subst">&#123;flask.__version__&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run</span><br></pre></td></tr></table></figure><p>url: <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a></p><h4 id="引入-render-template"><a href="#引入-render-template" class="headerlink" title="引入 render_template"></a>引入 render_template</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果页面不是放到 templates 目录下是会报错的</p></blockquote><p>templates内网页引用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename= &#x27;css/bootstrap.min.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&#x27;文件夹名字&#x27;, filename= &#x27;样式路径&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="创建网页模板"><a href="#创建网页模板" class="headerlink" title="创建网页模板"></a>创建网页模板</h4><p>在 templates 目录下 创建模板(造轮子)，方便后面引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block xxxx %&#125; 内容 &#123;% endblock %&#125;<span class="comment"># 相当于占位符</span></span><br></pre></td></tr></table></figure><p>如何在其它页面内引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends <span class="string">&#x27;xxx.html&#x27;</span> %&#125;<span class="comment"># xxx.html 为设置好的模板</span></span><br></pre></td></tr></table></figure><p>引入模板后直接在模板设置的占位符内添加想要显示的内容即可</p><h4 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h4><table><thead><tr><th>字段</th><th>类型</th><th>类型简介</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>integer PRIMARY KEY AUTOINCREMENT</td><td>整型 主键 自增</td><td>文章id</td></tr><tr><td>created</td><td>TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</td><td>时间 非空 默认值当前时间</td><td>创建时间</td></tr><tr><td>title</td><td>text NOT NUL</td><td>文本 非空</td><td>标题</td></tr><tr><td>content</td><td>text NOT NUL</td><td>文本 非空</td><td>文章内容</td></tr><tr><td>sketch</td><td>text</td><td>文本</td><td>文章简介</td></tr><tr><td>picture</td><td>text</td><td>文本</td><td>背景图链接</td></tr></tbody></table><p align='center'>文章 字段 设计</p><p>直接使用 SQLit3 数据库 Python自带的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS posts;</span><br><span class="line"></span><br><span class="line">CREATE TABLE posts(</span><br><span class="line">id integer PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">title text NOT NULL,</span><br><span class="line">content text NOT NULL,</span><br><span class="line">    sketch text,</span><br><span class="line">    picture text</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id 文章序号</span><br><span class="line">created 创建时间</span><br><span class="line">title 文章标题</span><br><span class="line">content 文章内容</span><br><span class="line">sketch 文章简介</span><br><span class="line">picture 背景图片url</span><br></pre></td></tr></table></figure><p>新建一个Python文件用来执行上面的sql文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开db.sql文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.sql&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 执行读取到的sql语句</span></span><br><span class="line">    conn.executescript(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动插入数据</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(<span class="string">&quot;INSERT INTO posts(title,content) VALUES(?, ?)&quot;</span>,</span><br><span class="line">            (<span class="string">&#x27;测试1&#x27;</span>,<span class="string">&#x27;xxxxxxxxxxxxxx&#x27;</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&quot;INSERT INTO posts(title,content) VALUES(?,?)&quot;</span>,</span><br><span class="line">            (<span class="string">&quot;测试2&quot;</span>,<span class="string">&quot;xxxxxx内容xxxxx&quot;</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">conn.commit()</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">conn.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据库创建完成&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>执行这个Python文件后就会根据之前写的sql语句创建 database.db 数据库</p></blockquote><p>可以看到当前目录下多个 database.db 文件</p><h4 id="将数据库信息读取出来放到页面上"><a href="#将数据库信息读取出来放到页面上" class="headerlink" title="将数据库信息读取出来放到页面上"></a>将数据库信息读取出来放到页面上</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;# for 循环调用查询到的posts #&#125;</span><br><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">    &#123;# 将文章列表打印出来 #&#125;</span><br><span class="line">    &lt;div class=&quot;post-preview&quot; align=&quot;center&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;</span><br><span class="line">            &lt;h2 class=&quot;post-title&quot;&gt;&#123;&#123; post[&#x27;title&#x27;] &#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h3 class=&quot;post-subtitle&quot;&gt;&#123;&#123; post[&#x27;content&#x27;] &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;p class=&quot;post-meta&quot;&gt;Created on &#123;&#123; post[&#x27;created&#x27;] &#125;&#125; &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>使用循环语句将其数据打印出来，在适当的位置插入想要的字典名</p><h4 id="添加写文章功能-对数据库进行增加"><a href="#添加写文章功能-对数据库进行增加" class="headerlink" title="添加写文章功能(对数据库进行增加)"></a>添加写文章功能(对数据库进行增加)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  新建文章</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin/new&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.form[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        sketch = request.form[<span class="string">&#x27;sketch&#x27;</span>]</span><br><span class="line">        picture = request.form[<span class="string">&#x27;picture&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> title:</span><br><span class="line">            flash(<span class="string">&#x27;标题不能为空!&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> content:</span><br><span class="line">            flash(<span class="string">&#x27;内容不能为空&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conn = get_db_connection()</span><br><span class="line">            conn.execute(<span class="string">&#x27;INSERT INTO posts (title, content , sketch ,picture) VALUES (?, ?, ?, ?)&#x27;</span>,</span><br><span class="line">                         (title, content, sketch, picture))</span><br><span class="line">            conn.commit()</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="comment"># 原路返回</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建文章详情页"><a href="#创建文章详情页" class="headerlink" title="创建文章详情页"></a>创建文章详情页</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block postye %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;masthead&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(&#123;&#123; post[&#x27;picture&#x27;] &#125;&#125;)&quot;</span>&gt;</span>  、   <span class="comment">&lt;!-- 设置背景图 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container position-relative px-4 px-lg-5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gx-4 gx-lg-5 justify-content-center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-lg-8 col-xl-7&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-heading&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文章标题 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; post[&#x27;title&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引言 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;subheading&quot;</span>&gt;</span>&#123;&#123; post[&#x27;sketch&#x27;] &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;meta&quot;</span>&gt;</span></span><br><span class="line">                                用户: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://rskil.github.io/&quot;</span>&gt;</span>rskil<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line"><span class="comment">&lt;!-- 文章创建时间 --&gt;</span></span><br><span class="line">                                发布时间: &#123;&#123; post[&#x27;created&#x27;] &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Post Content--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container px-4 px-lg-5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row gx-4 gx-lg-5 justify-content-center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10 col-lg-8 col-xl-7&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;p&gt;文字&lt;/p&gt; --&gt;</span></span><br><span class="line">                        &#123;&#123; post[&#x27;content&#x27;] &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 class=&quot;section-heading&quot;&gt;段落标签&lt;/h2&gt; --&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;blockquote class=&quot;blockquote&quot;&gt;浅色文字&lt;/blockquote&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;#!&quot;&gt;&lt;img class=&quot;img-fluid&quot; src=&quot;assets/img/post-sample-image.jpg&quot; alt=&quot;...&quot; /&gt;&lt;/a&gt; --&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;span class=&quot;caption text-muted&quot;&gt;图片下方说明&lt;/span&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="用户登录功能实现-session"><a href="#用户登录功能实现-session" class="headerlink" title="用户登录功能实现 session"></a>用户登录功能实现 session</h4><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>username</td><td>text NOT NULL</td><td>用户名</td></tr><tr><td>password</td><td>text NOT NULL</td><td>密码</td></tr><tr><td>userimage</td><td>text</td><td>用户头像url</td></tr><tr><td>register</td><td>TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP</td><td>用户注册时间，默认为当前时间</td></tr></tbody></table><p align='center'>user表 字段 设计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">integer</span> <span class="keyword">PRIMARY</span> KEY AUTOINCREMENT,</span><br><span class="line">username text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">password text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">userimage text,</span><br><span class="line">register <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># 如果是get请求就返回login页面</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取表单传过来的用户名和密码</span></span><br><span class="line">    username = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将前端输入和从数据库取到的字段值做对比进行判断</span></span><br><span class="line">    <span class="keyword">if</span> username == get_user()[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> password == get_user()[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">        <span class="comment"># 给session赋值 目的是 区分登录和未登录</span></span><br><span class="line">        session[<span class="string">&#x27;user_info&#x27;</span>] = username</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/admin&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    <span class="comment"># user_info 用来判断用户是否是从登录页面进行登录</span></span><br><span class="line">    <span class="comment"># 如果直接方法 admin 路径 这时的 user_info 为 None ,return 到 login页</span></span><br><span class="line">    <span class="comment"># user_info 有值的话 进入后台</span></span><br><span class="line">    user_info = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_info <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查询文章id</span></span><br><span class="line">    conn = get_db_connection()</span><br><span class="line">    posts = conn.execute(<span class="string">&#x27;select * from posts order by created desc&#x27;</span>).fetchall()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>,posts=posts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出登录状态</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="comment"># 清除session</span></span><br><span class="line">    <span class="keyword">del</span> session[<span class="string">&#x27;user_info&#x27;</span>]</span><br><span class="line">    <span class="comment"># 返回主页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1Yy4y1r7tm?share_source=copy_web&vd_source=d4d94cfc2a69cca08fcb3d872110bafc">Flask Session 实现网站用户登录，Python Web 开发新手小白进阶关键</a> </p><h6 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplateSyntaxError</span><br><span class="line">jinja2.exceptions.TemplateSyntaxError: expected token &#x27;end of print statement&#x27;, got &#x27;=&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>检查 各处 Jinja2 语法格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError</span><br><span class="line">AttributeError: &#x27;sqlite3.Cursor&#x27; object has no attribute &#x27;retchall&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>检查 ‘retchall’  拼写错误</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BuildError</span><br><span class="line">werkzeug.routing.exceptions.BuildError: Could not build url for endpoint &#x27;login&#x27;. Did you mean &#x27;index&#x27; instead?</span><br></pre></td></tr></table></figure><blockquote><p>检查一下方法名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UndefinedError</span><br><span class="line">jinja2.exceptions.UndefinedError: &#x27;post&#x27; is undefined</span><br></pre></td></tr></table></figure><blockquote><p>冲突了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplateSyntaxError</span><br><span class="line">jinja2.exceptions.TemplateSyntaxError: unexpected &#x27;/&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeError</span><br><span class="line">TypeError: new() got an unexpected keyword argument &#x27;id&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BadRequestKeyError</span><br><span class="line">werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.</span><br><span class="line">KeyError: &#x27;content&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplateNotFound</span><br><span class="line">jinja2.exceptions.TemplateNotFound: /admin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeError</span><br><span class="line">TypeError: get_user() takes 0 positional arguments but 1 was given</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeError</span><br><span class="line">TypeError: The view function for &#x27;admin&#x27; did not return a valid response. The function either returned None or ended without a return statement.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KeyError</span><br><span class="line">KeyError: &#x27;user_info&#x27;</span><br></pre></td></tr></table></figure><hr><p>参考:</p><p>​<a href="https://dormousehole.readthedocs.io/en/latest/">Flask 中文文档</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github actions 自动化部署 Hexo</title>
      <link href="/2022/08/25/Github%20Actions%20%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Hexo/"/>
      <url>/2022/08/25/Github%20Actions%20%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20Hexo/</url>
      
        <content type="html"><![CDATA[<h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><ul><li>test_blog</li><li>rskil.github.io</li></ul><h4 id="在-test-blog-填写私钥"><a href="#在-test-blog-填写私钥" class="headerlink" title="在 test_blog 填写私钥"></a>在 test_blog 填写私钥</h4><p><img src="https://img-blog.csdnimg.cn/9e549d12e85843e791d6939fc68ad2aa.png" alt="私钥填写"></p><h4 id="rskil-github-io仓库内放入公钥"><a href="#rskil-github-io仓库内放入公钥" class="headerlink" title="rskil.github.io仓库内放入公钥"></a>rskil.github.io仓库内放入公钥</h4><h4 id="test-blog仓库内配置-Actions-生成框架文件"><a href="#test-blog仓库内配置-Actions-生成框架文件" class="headerlink" title="test_blog仓库内配置 Actions 生成框架文件"></a>test_blog仓库内配置 Actions 生成框架文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master branch on push, auto run</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">      </span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16.14.0&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span>    <span class="comment"># 缓存node_modules，避免每次跑action都要重新下载</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Deploy</span> <span class="string">Private</span> <span class="string">Key</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span>    <span class="comment"># 这个就是Source仓库的私钥</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot;</span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">准备Hexo环境</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string">        npm install --save hexo-blog-encrypt</span></span><br><span class="line"><span class="string">        hexo init blog_oranges</span></span><br><span class="line"><span class="string">        cd blog_oranges</span></span><br><span class="line"><span class="string">        npm install --save hexo-deployer-git</span></span><br><span class="line"><span class="string">        hexo g</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;rskil&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;renhang0203@88.com&quot;</span></span><br><span class="line"><span class="string">        # ssh -T git@github.com</span></span><br><span class="line"><span class="string">        rm -rf .gitignore</span></span><br><span class="line"><span class="string">        git add .</span></span><br><span class="line"><span class="string">        git commit -m &quot;模板&quot; -a</span></span><br><span class="line"><span class="string">        git push</span></span><br></pre></td></tr></table></figure><h5 id="往仓库上传修改过的主题-配置文件-…"><a href="#往仓库上传修改过的主题-配置文件-…" class="headerlink" title="往仓库上传修改过的主题 配置文件 …"></a>往仓库上传修改过的主题 配置文件 …</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.gitignore</span><br><span class="line">_config.oranges.yml</span><br><span class="line">_config.yml</span><br><span class="line">themes</span><br><span class="line">source</span><br></pre></td></tr></table></figure><h4 id="仓库内文件为"><a href="#仓库内文件为" class="headerlink" title="仓库内文件为"></a>仓库内文件为</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">test_blog/blog_oranges/</span></span><br><span class="line">.github</span><br><span class="line">node_modules</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br><span class="line">.gitignore</span><br><span class="line">_config.landscape.yml</span><br><span class="line">_config.oranges.yml</span><br><span class="line">_config.yml</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">yarn.lock</span><br></pre></td></tr></table></figure><h4 id="修改自动化文件为"><a href="#修改自动化文件为" class="headerlink" title="修改自动化文件为"></a>修改自动化文件为</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> </span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">      </span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16.14.0&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span>    <span class="comment"># 缓存node_modules，避免每次跑action都要重新下载</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="comment"># 配置ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Deploy</span> <span class="string">Private</span> <span class="string">Key</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span>    <span class="comment"># 这个就是Source仓库的私钥</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">准备Hexo环境</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      # 安装hexo</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string">        # 安装hexo文章加密模块</span></span><br><span class="line"><span class="string">        npm install --save hexo-blog-encrypt</span></span><br><span class="line"><span class="string">        # 进入hexo所在目录</span></span><br><span class="line"><span class="string">        cd blog_oranges</span></span><br><span class="line"><span class="string">        hexo g</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;rskil&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;renhang0203@88.com&quot;</span></span><br><span class="line"><span class="string">        sleep 3</span></span><br><span class="line"><span class="string">        # 安装git</span></span><br><span class="line"><span class="string">        npm install --save hexo-deployer-git</span></span><br><span class="line"><span class="string">        sleep 3</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">上传</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cd blog_oranges</span></span><br><span class="line"><span class="string">        hexo d</span></span><br><span class="line"><span class="string">        date</span></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h4><p>只需要改动仓库内的<code>_config.yml</code>，<code>_config.oranges.yml</code>，<code>themes</code>，<code>source</code> 文件夹即可<br>然后就会触发自动化脚本，自动生成静态文件，推送到设置好的仓库内</p>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器内体验WebSSH</title>
      <link href="/2022/05/12/Docker%E5%AE%B9%E5%99%A8%E5%86%85%E4%BD%93%E9%AA%8C%20WebSSH/"/>
      <url>/2022/05/12/Docker%E5%AE%B9%E5%99%A8%E5%86%85%E4%BD%93%E9%AA%8C%20WebSSH/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker容器内体验-WebSSH"><a href="#Docker容器内体验-WebSSH" class="headerlink" title="Docker容器内体验 WebSSH"></a>Docker容器内体验 WebSSH</h2><p>项目地址: <a href="https://pypi.org/project/webssh/">https://pypi.org/project/webssh/</a></p><h5 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -tid --name centos -p 8888:8888 -p 122:22 centos:7 /bin/bash  # 启动容器</span><br></pre></td></tr></table></figure><h5 id="写个比较呆的shell脚本，方便安装"><a href="#写个比较呆的shell脚本，方便安装" class="headerlink" title="写个比较呆的shell脚本，方便安装"></a>写个比较呆的shell脚本，方便安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; wssh.sh</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install --assumeyes python3-pip </span><br><span class="line">pip3 install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple/ # 清华源加速临时安装</span><br><span class="line">pip3 install webssh -i https://pypi.tuna.tsinghua.edu.cn/simple/  # 清华源加速临时安装</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器内安装ssh服务</span></span><br><span class="line">yum -y install openssh-server # 下载ssh服务</span><br><span class="line">echo 1234 | passwd --stdin root     # 更改密码</span><br><span class="line">/usr/sbin/sshd-keygen –A  # 添加密钥</span><br><span class="line">/usr/sbin/sshd    # 启动ssh服务</span><br><span class="line"></span><br><span class="line">echo “输入 wssh 回车，即运行WebSSH”</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp wssh.sh centos:/root</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti centos /bin/bash  # 进入容器</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /root/wssh.sh </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wssh</span><br></pre></td></tr></table></figure><p>容器内输入 wssh 默认启动 WebSHH 服务</p><p>在局域网内 浏览器上访问 容器的宿主ip+8888端口 进行访问</p><p><img src="https://img-blog.csdnimg.cn/aa37558b30c2445ebab29dc6b3171950.png" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/25adab83948e4c69879e13398ba16f7b.png" alt="请添加图片描述"></p><blockquote><p>搭配钉钉内网穿透一起使用<br>不掉线的话还行</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数</title>
      <link href="/2022/03/10/Python%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/10/Python%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>函数的定义和调用，函数参数的传递，函数的返回值，变量作用域，特殊形式的函数</p><span id="more"></span><h3 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h3><p>​函数是组织好的实现单一功能或相关联功能的代码段。使用函数来编程可使程序模块化，既减少了冗余代码，又让程序结构更为清晰，既能提高开发人员的编程效率，又方便后期的维护和扩展。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数体</span> ([参数列表]):</span><br><span class="line">    [<span class="string">&quot;&quot;&quot;&quot;文档字符串&quot;&quot;&quot;</span><span class="string">&quot;]</span></span><br><span class="line"><span class="string">    函数体</span></span><br><span class="line"><span class="string">    [return语句] #返回语句</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">格式相关说明</span></span><br><span class="line"><span class="string"># def 关键字 ： 函数开始的标志</span></span><br><span class="line"><span class="string"># 函数名： 函数的唯一标识，遵循标识符的命名规则</span></span><br><span class="line"><span class="string"># 参数列表： 负责接收和传入函数中的数据，可以包含一个或多个参数，也可以为空</span></span><br><span class="line"><span class="string"># 冒号： 函数体开始的标志</span></span><br><span class="line"><span class="string"># 文档字符串： 由一对三引号包裹的用于说明函数功能的字符串，可以省略</span></span><br><span class="line"><span class="string"># 函数体：实现函数功能的具体代码</span></span><br><span class="line"><span class="string"># return语句 ： 返回函数的处理结果给调用方，是函数的结束标志。若函数没有返回值可以省略return语句。</span></span><br></pre></td></tr></table></figure><h5 id="例如，定义一个计算两数之和的函数"><a href="#例如，定义一个计算两数之和的函数" class="headerlink" title="例如，定义一个计算两数之和的函数"></a>例如，定义一个计算两数之和的函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">result = <span class="number">11</span> + <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>定义的add()是一个无参函数，只能计算11和22的和，具有局限性</p><p>改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b</span>):</span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>这样一来就成有参函数了，调用的时候得带上参数</p><p>可以计算任意两数的值了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">11</span>,<span class="number">22</span>) <span class="comment"># test(a,b) a和b的值可以任意填</span></span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ol><li>函数自定义要在函数调用前</li><li>函数内可以嵌套函数</li><li>也可以在函数内定义函数 将其调用</li><li>函数内部的函数不能直接在外部调用</li></ol><h4 id="函数的嵌套定义"><a href="#函数的嵌套定义" class="headerlink" title="函数的嵌套定义"></a>函数的嵌套定义</h4><p>​函数在定义时可以在其内部嵌套定义另外一个函数，此时嵌套的函数称为外层函数，被嵌套的函数称为内层函数。</p><p>​例: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    test = a + b</span><br><span class="line">    <span class="built_in">print</span>(test)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ddd</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是内层函数&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment"># 输出为 3</span></span><br><span class="line">ddd()<span class="comment"># 在外部调用内层函数是会报错的</span></span><br></pre></td></tr></table></figure><blockquote><p>内层函数没被调用的话时不会运行的，在外部直接调用内层的函数也是调用不了的</p></blockquote><p>​例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    test = a + b</span><br><span class="line">    <span class="built_in">print</span>(test)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ddd</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我是内层函数&#x27;</span>)</span><br><span class="line">    ddd()<span class="comment"># 调用内层</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出为</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 我是内层函数</span></span><br></pre></td></tr></table></figure><blockquote><p>只有在定义了后在其内部调用才能被执行</p></blockquote><h3 id="函数参数的传递"><a href="#函数参数的传递" class="headerlink" title="函数参数的传递"></a>函数参数的传递</h3><p>​将定义函数时设置的参数称为形式参数(形参)</p><h4 id="位置参数的传递"><a href="#位置参数的传递" class="headerlink" title="位置参数的传递"></a>位置参数的传递</h4><p>​函数在被调用时会将按照相应的位置依次传递给形参，即第一个实参，传给第一个形参，第二个实参传给第二个形参，以此类推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">bj,rens,pjf</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;bj&#125;</span>班,<span class="subst">&#123;rens&#125;</span>人,<span class="subst">&#123;pjf&#125;</span>分&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test(<span class="number">2020</span>,<span class="number">49</span>,<span class="number">90</span>)     <span class="comment"># 输出为  2020班,49人,90分</span></span><br></pre></td></tr></table></figure><h4 id="关键字参数的传递"><a href="#关键字参数的传递" class="headerlink" title="关键字参数的传递"></a>关键字参数的传递</h4><p>​若函数的参数数量比较多，开发者难以记住每个参数的作时，按照位置传参就不是很方便</p><p>这是关键字传参就很人性了 ，关键字传递是通过 ”形参 &#x3D; 实参“ 的格式将实参与形参相关联，将实参按照对应的关键字传递给形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">bj,rens,pjf</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;bj&#125;</span>班,<span class="subst">&#123;rens&#125;</span>人,<span class="subst">&#123;pjf&#125;</span>分&#x27;</span>)</span><br><span class="line"></span><br><span class="line">test(rens=<span class="number">49</span>,pjf=<span class="number">90</span>,bj=<span class="number">2020</span>)<span class="comment"># 输出为  2020班,49人,90分</span></span><br></pre></td></tr></table></figure><h4 id="默认参数传递"><a href="#默认参数传递" class="headerlink" title="默认参数传递"></a>默认参数传递</h4><p>​在函数定义的时候可以指定形参的默认值，如果调用的时候没有给这个形参值的话就会直接使用形参的默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span> (ip,port=<span class="number">8080</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;设备<span class="subst">&#123;ip&#125;</span>,端口<span class="subst">&#123;port&#125;</span>&#x27;</span>)</span><br><span class="line">test(ip=<span class="string">&quot;127.0.0.1&quot;</span>)<span class="comment"># 输出为 设备127.0.0.1,端口8080</span></span><br><span class="line">test(ip=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="string">&quot;80&quot;</span>)  <span class="comment"># 输出为 设备127.0.0.1,端口80</span></span><br></pre></td></tr></table></figure><h3 id="参数的打包与解包"><a href="#参数的打包与解包" class="headerlink" title="参数的打包与解包"></a>参数的打包与解包</h3><p>​函数支持将实参以打包和解包的形式传递给形参。</p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>​如果函数在定义时无法确定需要接收多少个数据，可以在定义函数时为形参添加”<em>“和”**”，如果在形参前加上一个 * ，那么它就可以接收以元组形式打包的多个值，如果是 两个</em> ，那么它可以接收以字典形式打包的多个值‘</p><h5 id="“”-元组-形式-args"><a href="#“”-元组-形式-args" class="headerlink" title="“” 元组*形式 args"></a>“<em>” 元组*<em>形式</em></em> args</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">test(<span class="string">&#x27;vm&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;男&#x27;</span>)  <span class="comment"># 输出为  (&#x27;vm&#x27;, 19, &#x27;男&#x27;)</span></span><br></pre></td></tr></table></figure><h5 id="“-”-字典形式-kwargs"><a href="#“-”-字典形式-kwargs" class="headerlink" title="“**”  字典形式 kwargs"></a>“**”  字典形式 kwargs</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">test(a=<span class="number">11</span>,b=<span class="number">22</span>,c=<span class="number">33</span>)  <span class="comment"># 输出为  &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 22, &#x27;c&#x27;: 33&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>​虽然函数中添加“*”或“**” 的形参可以是符合命名规范的任意名称，但一般建议使用 “ * args”和 “ * *kwargs”,若它没有接收到任何数据，参数” * args”和 “ * *kwargs”为空 ， 即它们为空元组或空字典。</p></blockquote><h4 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h4><p>​如果函数在调用的时接收的实参是元组类型的数据，那么可以使用”*”将元组拆成多个值，并将每个值按照位置参数传递的方式赋值给形参，如果函数在调用时接收的实参是字典类型的数据，可以使用”**”将字典拆分成多个键值对，并将每个值按照关键字参数传递的方式赋值给与键名对应的形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unpack</span>(<span class="params">a,b,c,d,e</span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b,c,d,e)</span><br><span class="line"></span><br><span class="line">nums = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">unpack(*nums)    <span class="comment"># 输出为 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h3 id="混合传递"><a href="#混合传递" class="headerlink" title="混合传递"></a>混合传递</h3><p>​函数的参数传递的方式在定义函数或调用函数时可以混合使用，但是需要遵循一定的优先级规则，这些方式按优先级从高到低依次为按位置参数传递</p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p> return</p><p>如果定义的函数只返回了一个值，就是一个值</p><p>如果返回多个值，那这些值就会被保存到元组中</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><p>​根据作用域的不同，变量可分为局部变量，全局变量</p><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>​局部变量是指在函数内部定义的变量，只能在函数内部被使用，函数执行结束之后局部变量会被释放，此时无法访问。</p><p>​不同函数内部可以包含同名的局部变量，这些局部变量的关系类似于“不同目录下的同名文件”的关系，它们相互独立，互不影响。</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>​局部变量可以在整个程序范围内起作用，它不会受函数范围的影响。</p><h4 id="global和nonlocal关键字"><a href="#global和nonlocal关键字" class="headerlink" title="global和nonlocal关键字"></a>global和nonlocal关键字</h4><h5 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h5><p>​使用global关键字可以将局部变量声明为全局变量</p><h5 id="nonlocal关键字"><a href="#nonlocal关键字" class="headerlink" title="nonlocal关键字"></a>nonlocal关键字</h5><p>​nonlocal关键字可以在局部作用域中修改嵌套作用域中声明的变量</p><h3 id="特殊形式的函数"><a href="#特殊形式的函数" class="headerlink" title="特殊形式的函数"></a>特殊形式的函数</h3><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><p>​函数在定义时可以直接或间接的调用其他函数，若函数内部调用了自身，则这个函数被称为递归函数，递归函数通常用于解决结构相似的问题。它采用递归的方式，将一个复杂的大型问题转换为与原问题结构相似的规模较小的若干子问题，之后对最小化的子问题求解，从而得到原问题的解。</p><p>​递归函数在定义时需要满足2个基本条件： 一个是递归公式 另一个是边界条件，其中，递归公式是求解原问题或相似问题的结构。边界条件是最小化的问题， 也是递归终止的条件。</p><p>​递归函数的执行可以分为以下两个阶段</p><pre><code> 1. 递推 ： 递归本次的执行都是基于上一次的运算结果。 2. 回溯：遇到终止条件是，则沿着递推往回一级一级的把值返回来。</code></pre><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">[参数列表]</span>):</span><br><span class="line"><span class="keyword">if</span> 边界条件:</span><br><span class="line"><span class="keyword">return</span> 结果</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> 递归公式</span><br></pre></td></tr></table></figure><p>递归最经典的应用便是阶乘。在数学中，求正数n！(n的阶乘)问题根据n的取值可以分为以下两种情况</p><ul><li>当n &#x3D; 1 时，所得的结果为 1</li><li>当n &gt; 1 时，所得的结果为 n x (n-1)!</li></ul><p>那么利用递归求解阶乘是，n&#x3D;1 是边界条件，n x (n-1)! 是递归公式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  num*func(num - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入一个整数&#x27;</span>))</span><br><span class="line">result = func(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span> ! = %d&#x27;</span>%result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 输入 5   输出为 5 ! = 120</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>​匿名函数是一类无须定义的标识符的函数，它与普通函数一样可以在程序的任何位置使用。Python中使用lambda关键字来定义匿名函数。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> &lt;形式参数列表&gt;:&lt;表达式&gt;<span class="comment"># 格式</span></span><br></pre></td></tr></table></figure><p>匿名函数和普通函数的区别：</p><ol><li>普通函数在定义的时候有名称，而匿名函数没有名称</li><li>普通函数的函数体中包含多条语句，而匿名函数的函数体只能是一个表达式。</li><li>普通函数可以实现比较复杂的功能，而匿名函数可以实现的功能比较简单</li><li>普通函数能被其他程序使用，而匿名函数不能被其他程序使用。</li></ol><p>​定义好的匿名函数不能直接使用，最好使用一个变量保存它，以便后期可以随时使用这给函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义匿名函数，并将它返回的函数对象赋值给变量 test</span></span><br><span class="line">test = <span class="keyword">lambda</span> a,b : a+b</span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">10</span>,<span class="number">30</span>)) <span class="comment"># 输出为 40</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python组合数据类型</title>
      <link href="/2022/03/08/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/08/Python%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>组合数据类型，列表，元组，集合，字典 …</p><span id="more"></span><h3 id="认识组合数据类型"><a href="#认识组合数据类型" class="headerlink" title="认识组合数据类型"></a>认识组合数据类型</h3><h4 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h4><p>​序列类型来源于数学概念中的数列。数列是按一定顺序排成一列的的一组数，每个数称为这个数列的项，数列的索引是从0开始，通过索引i可以访问数列中的第i-1项。</p><p>​序列类型在数列的基础上进行了扩展，Python中的序列支持双向索引：正向递增索引和反向递减索引</p><p>​Python 中常用的序列类型主要有3种，字符串(str)，列表(list)和元组(tuple)。</p><h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><p>​数学中的集合是指具有某种特定性质的对象汇总而成的集体，其中组成集合的对象称为该集合的元素，</p><p>​集合中的元素具有3个特性</p><pre><code> 1. 确定性：集合中的每个元素都是确定的 2. 互异性：集合中的元素互不相同 3. 无序性：集合中的元素没有顺序，若多个集合中的元素仅顺序不同，那么这些集合本质上是同一个元素</code></pre><p>Python中的集合和数学中集合的概念一致，具有以上3个特性，Python 要求放入集合中的元素必须是<strong>不可变类型</strong></p><p>Python中是<strong>整型</strong>，<strong>浮点型</strong>，<strong>字符串类型</strong>和<strong>元组</strong>属于<strong>不可变类型</strong>，<strong>列表</strong>，<strong>字典</strong>和<strong>集合本身</strong>都属于<strong>可变数据类型</strong> </p><h4 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h4><p>​映射类型以键值对的形式存储元素，键值对中的键与值之间存在映射关系，字典是Python中唯一的内置映射类型，字典的键必须遵循以下两个原则：</p><pre><code>1. 每个键只能对应一个值，不允许同一个键在字典中重复出现。1. 字典中的键是不可变类型。</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>​列表是Python中最灵活的序列类型，它没有长度限制，可以包含任意元素。</p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><h5 id="“-”创建"><a href="#“-”创建" class="headerlink" title="“[]”创建"></a>“[]”创建</h5><p>​语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_noe[]</span><br></pre></td></tr></table></figure><p>“[]”中可以是，整形，浮点型，字符串型等基本数据类型，也可以是列表，元素，字典等组合类型，还可以是其他自定义类型，列表元素的类型可以相同也可以不同，列表中元素以”,”进行分割。</p><h5 id="“list-”创建"><a href="#“list-”创建" class="headerlink" title="“list()”创建"></a>“list()”创建</h5><p>list函数只接受一个可迭代的数据，返回一个列表</p><p>​语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_one = <span class="built_in">list</span>(<span class="string">&#x27;Python&#x27;</span>)    <span class="comment"># 字符串类型是可迭代类型</span></span><br><span class="line">list_one = <span class="built_in">list</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;Python&#x27;</span>) <span class="comment"># 列表类型也是可迭代类型</span></span><br></pre></td></tr></table></figure><h5 id="怎么才算可迭代，可迭代对象？"><a href="#怎么才算可迭代，可迭代对象？" class="headerlink" title="怎么才算可迭代，可迭代对象？"></a>怎么才算可迭代，可迭代对象？</h5><p>​支持通过 for… in … 语句迭代获取数据对象就是可迭代对象，如 字符串和列表类型的数据可迭代获取，它们就是可迭代对象。可迭代对象还有集合，字典，文件类型的数据也是可迭代对象。</p><p>​使用<strong>isinstance()<strong>函数可以判断目标是否为可迭代对象 <strong>True</strong>为可迭代，输出为</strong>False</strong>则不可迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line">ls = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(ls,Iterable))</span><br></pre></td></tr></table></figure><h4 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h4><h5 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h5 id="切片方式"><a href="#切片方式" class="headerlink" title="切片方式"></a>切片方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># 按步长2获取列表中索引1-索引4对应的值       输出为 [1, 3]</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment"># 获取索引1-3的值 不包含索引4的值           输出为 [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">2</span>:])     <span class="comment"># 获取索引2-最后一个索引的值                输出为 [2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="built_in">print</span>(test[:])      <span class="comment"># 获取所有索引的值                         输出为 [0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="built_in">print</span>(test[:<span class="number">3</span>])     <span class="comment"># 获取索引最前面一个值到索引3前一个位置的值     输出为 [0, 1, 2]</span></span><br></pre></td></tr></table></figure><h5 id="循环中依次访问列表元素"><a href="#循环中依次访问列表元素" class="headerlink" title="循环中依次访问列表元素"></a>循环中依次访问列表元素</h5><p>使用for … in … 语句逐个访问列表中的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_test:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 输出为 P y t h o n </span></span><br></pre></td></tr></table></figure><h4 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h4><h5 id="append-方法-在列表末尾添加新元素"><a href="#append-方法-在列表末尾添加新元素" class="headerlink" title="append()方法 - 在列表末尾添加新元素"></a>append()方法 - 在列表末尾添加新元素</h5><p>​append()方法用于在列表末尾添加新的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">test.append(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(test)   <span class="comment"># 输出为 [0, 1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><h5 id="extend-方法-在列表末尾添加一个列表的所有元素"><a href="#extend-方法-在列表末尾添加一个列表的所有元素" class="headerlink" title="extend()方法 - 在列表末尾添加一个列表的所有元素"></a>extend()方法 - 在列表末尾添加一个列表的所有元素</h5><p>​extend()用于在列表末尾一次性添加另一个列表中的所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">test2 = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">test1.extend(test2)</span><br><span class="line"><span class="built_in">print</span>(test1)<span class="comment"># 输出为 [0, 1, 2, 3, 9, 8, 7, 6]</span></span><br></pre></td></tr></table></figure><h5 id="insert-方法-按照索引插入元素"><a href="#insert-方法-按照索引插入元素" class="headerlink" title="insert()方法 - 按照索引插入元素"></a>insert()方法 - 按照索引插入元素</h5><p>​insert()用于按照索引将新元素插入列表的指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">test.insert(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(test)<span class="comment"># 输出为 [9, 0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h4><h5 id="sort-方法-按特定的顺序对列表元素排序"><a href="#sort-方法-按特定的顺序对列表元素排序" class="headerlink" title="sort()方法 - 按特定的顺序对列表元素排序"></a>sort()方法 - 按特定的顺序对列表元素排序</h5><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">list_test.sort(key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(list_test)  <span class="comment"># 输出为 [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数key 用于指定排序规则 默认值 None</span></span><br><span class="line"><span class="comment"># 参数reverse 用于控制列表元素排序的方式 参数值有 False(默认值，按升序排)和True(按降序排列)</span></span><br></pre></td></tr></table></figure><p>sort()方法排序完后不会产生新的列表，而是直接覆盖原列表</p><h5 id="sorted-方法-按升序排列列表元素"><a href="#sorted-方法-按升序排列列表元素" class="headerlink" title="sorted()方法 - 按升序排列列表元素"></a>sorted()方法 - 按升序排列列表元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">list_new = <span class="built_in">sorted</span>(list_test)</span><br><span class="line"><span class="built_in">print</span>(list_new)  <span class="comment"># 输出为 [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>sorted()方法是将原数据按升序排列，返回一个新数列，不会对原数据产生影响</p><h5 id="reverse-方法-逆置列表，将原列表元素从右到左依次排列存放"><a href="#reverse-方法-逆置列表，将原列表元素从右到左依次排列存放" class="headerlink" title="reverse()方法 - 逆置列表，将原列表元素从右到左依次排列存放"></a>reverse()方法 - 逆置列表，将原列表元素从右到左依次排列存放</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">list_test.reverse()</span><br><span class="line"><span class="built_in">print</span>(list_test)  <span class="comment"># 输出为 [6, 3, 8, 5, 7, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><p>reverse()方法会逆置数列，直接对原数据进行操作</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="del语句-删除列表中指定位置的元素"><a href="#del语句-删除列表中指定位置的元素" class="headerlink" title="del语句 - 删除列表中指定位置的元素"></a>del语句 - 删除列表中指定位置的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">del</span> list_test[<span class="number">0</span>]  <span class="comment"># 索引 0 </span></span><br><span class="line"><span class="built_in">print</span>(list_test)  <span class="comment"># 输出为 [2, 4, 7, 5, 8, 3, 6]</span></span><br></pre></td></tr></table></figure><p>del语句也可以删除整个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">del</span> list_test</span><br><span class="line"><span class="built_in">print</span>(list_test)  <span class="comment"># 会报错 NameError: name &#x27;list_test&#x27; is not defined</span></span><br></pre></td></tr></table></figure><p>从报错可发现，del语句删除的并不是列表中的数据，而是删除了整个列表</p><h5 id="remove-方法-移除某个元素"><a href="#remove-方法-移除某个元素" class="headerlink" title="remove()方法 - 移除某个元素"></a>remove()方法 - 移除某个元素</h5><p>​移除列表中的某个元素，若列表中有多个匹配的元素，remove()只能移除第一个匹配到的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">list_test.remove(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_test)  <span class="comment"># 输出为  [&#x27;H&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="pop-方法-移除某个元素"><a href="#pop-方法-移除某个元素" class="headerlink" title="pop()方法 - 移除某个元素"></a>pop()方法 - 移除某个元素</h5><p>​移除列表中的某一个元素，若未指定具体的元素，则移除列表中最后一个元素，指定了下标就移除对应的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">test.pop()</span><br><span class="line"><span class="built_in">print</span>(test) <span class="comment"># 输出为 [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">test.pop(<span class="number">1</span>)<span class="comment"># 指定了小标 就移除对应的元素</span></span><br><span class="line"><span class="built_in">print</span>(test)<span class="comment"># 输出为 [1, 3, 4]</span></span><br></pre></td></tr></table></figure><h5 id="clear-方法-清空列表"><a href="#clear-方法-清空列表" class="headerlink" title="clear()方法 - 清空列表"></a>clear()方法 - 清空列表</h5><p>​清空列表，最后还剩一个空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">test.clear()</span><br><span class="line"><span class="built_in">print</span>(test)   <span class="comment"># 输出为 []</span></span><br></pre></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>​列表推导式是符合Python语法规则的复合表达式，它能以最简洁的方式根据已有的列表构建满足特定需求的列表。由于列表使用[ ] 创建，列表推导式用于生成列表，所以列表推导式放在[ ] 中，列表推导式的基本格式入下</p><p>​语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[exp <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>]</span><br><span class="line"><span class="comment"># 参数 exp 用于在每层循环中对列表中的元素进行运算</span></span><br><span class="line"><span class="comment"># for ... in ... 用于遍历list</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将列表内每个元素替换为它的平方</span></span><br><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list_test = [date*date <span class="keyword">for</span> date <span class="keyword">in</span> list_test]</span><br><span class="line"><span class="built_in">print</span>(list_test) <span class="comment"># 输出为 [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure><h5 id="带if语句的列表推导式"><a href="#带if语句的列表推导式" class="headerlink" title="带if语句的列表推导式"></a>带if语句的列表推导式</h5><pre><code> 在基本列表推导式的for语句之后添加一个if语句，就组成了带if语句的列表推导式</code></pre><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[exp <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> cond]</span><br><span class="line"><span class="comment"># cond 是判断条件</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list_test = [date*date <span class="keyword">for</span> date <span class="keyword">in</span> list_test <span class="keyword">if</span> date&gt;=<span class="number">4</span> ]</span><br><span class="line"><span class="built_in">print</span>(list_test) <span class="comment"># 输出为 [16]</span></span><br></pre></td></tr></table></figure><h5 id="嵌套for循环语句的列表推导式"><a href="#嵌套for循环语句的列表推导式" class="headerlink" title="嵌套for循环语句的列表推导式"></a>嵌套for循环语句的列表推导式</h5><pre><code> 在基本列表推导式的for语句之后添加一个for语句，就组成了列表推导式的循环嵌套</code></pre><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[exp <span class="keyword">for</span> x <span class="keyword">in</span> list_1 <span class="keyword">for</span> y <span class="keyword">in</span> list_2]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_one = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_tow = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list_new = [ i+j <span class="keyword">for</span> i <span class="keyword">in</span> list_one <span class="keyword">for</span> j <span class="keyword">in</span> list_tow]</span><br><span class="line"><span class="built_in">print</span>(list_new) <span class="comment"># 输出为 [4, 5, 6, 5, 6, 7, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><h5 id="带if语句和嵌套循环语句的列表推导式"><a href="#带if语句和嵌套循环语句的列表推导式" class="headerlink" title="带if语句和嵌套循环语句的列表推导式"></a>带if语句和嵌套循环语句的列表推导式</h5><p>​列表推导式中嵌套的for循环可以有多个，每个循环也都可以与if语句连用，这种格式比较复杂</p><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[exp <span class="keyword">for</span> x <span class="keyword">in</span> list_1 [<span class="keyword">if</span> cond]</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> list_2 [<span class="keyword">if</span> cond]</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> list_x [<span class="keyword">if</span> cond]]</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>​元组的表现形式为一组包含在”()”中，有逗号分割的元素，元组中元素的个数，类型不受限制，</p><h4 id="使用”-”可以直接创建元组"><a href="#使用”-”可以直接创建元组" class="headerlink" title="使用”()”可以直接创建元组"></a>使用”()”可以直接创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_1 = ()<span class="comment"># 空元组</span></span><br><span class="line">a_2 = (<span class="number">1</span>,)<span class="comment"># 包含单个元素的元组，单个元素后面的 &quot;,&quot; 不能省略</span></span><br><span class="line">a_3 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment"># 包含多个元素的元组</span></span><br><span class="line">a_4 = (<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>,(<span class="string">&#x27;e&#x27;</span>,<span class="number">2</span>))<span class="comment"># 元组内可以有元组，元组嵌套</span></span><br></pre></td></tr></table></figure><h4 id="使用内置函数tuple-也可以创建元组"><a href="#使用内置函数tuple-也可以创建元组" class="headerlink" title="使用内置函数tuple()也可以创建元组"></a>使用内置函数tuple()也可以创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="built_in">tuple</span>()<span class="comment"># 创建空元组</span></span><br><span class="line">a2 = <span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment"># 利用列表创建元组 (1,2,3)</span></span><br><span class="line">a3 = <span class="built_in">tuple</span>(<span class="string">&#x27;Python&#x27;</span>)<span class="comment"># 利用字符串创建元组(&#x27;P&#x27;, &#x27;y&#x27;, &#x27;t&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;)</span></span><br><span class="line">a4 = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">5</span>))<span class="comment"># 利用迭代创建元组 (0, 1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><p>​与列表相同，元组也支持索引和切片方式访问元组的元素，也支持在循环中遍历元组，需要注意的是，元组是不可变类型，元组中的元素不能修改，即元组不支持添加元素，删除元素和排序操作。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>​Python的集合(set)本身是可变类型，但Python要求放入集合中的元素必须是不可变的类型，</p><p>​集合类型与列表和元组的区别是：集合中的元素无序但是必须唯一</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><p>​集合的表现形式为一组包含在大括号 <strong>“{}”</strong> 中，由逗号分割的元素</p><h5 id="使用-“-”-可以直接创建集合"><a href="#使用-“-”-可以直接创建集合" class="headerlink" title="使用 “{}” 可以直接创建集合"></a>使用 <strong>“{}”</strong> 可以直接创建集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>&#125;<span class="comment"># 单元素集合</span></span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>,(<span class="number">2</span>,<span class="number">4</span>)&#125;  <span class="comment"># 多元素集合</span></span><br></pre></td></tr></table></figure><p>ps:  **”{}”**不能创建空集合，因为不包含元素的 <strong>{}</strong> 创建的是空字典</p><h5 id="使用内置函数set-也可以创建集合"><a href="#使用内置函数set-也可以创建集合" class="headerlink" title="使用内置函数set()也可以创建集合"></a>使用内置函数set()也可以创建集合</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = set() # 创建空集合</span><br><span class="line">s2 = set([1,])# 传入列表</span><br><span class="line">s3 = set((2,3,4)) # 传入元组</span><br><span class="line">s4 = set(&#x27;Python&#x27;)# 传入字符串</span><br><span class="line">s5 = set(range(5))# 传入整个列表</span><br></pre></td></tr></table></figure><h4 id="集合的常见操作"><a href="#集合的常见操作" class="headerlink" title="集合的常见操作"></a>集合的常见操作</h4><p>​集合是可变的，集合中的元素可以动态增删，Python提供了一些内置方法来操作集合</p><table><thead><tr><th align="center">常见方法</th><th>说明</th></tr></thead><tbody><tr><td align="center">add(x)</td><td>向集合中添加元素x，x若已存在不做处理</td></tr><tr><td align="center">remove(x)</td><td>删除集合中的元素x，若x不存在，抛出KeyError异常</td></tr><tr><td align="center">discard(x)</td><td>删除集合中的元素x，若x不存在不做处理</td></tr><tr><td align="center">pop()</td><td>随机返回集合中的一个元素，同时删除该元素。若集合为空，抛出KeyError异常</td></tr><tr><td align="center">clear()</td><td>清空集合</td></tr><tr><td align="center">copy()</td><td>复制集合，返回值为集合</td></tr><tr><td align="center">isdisjoint(“T”)</td><td>判断集合与集合T是否有相同元素，没有返回True，有则返回False</td></tr></tbody></table><h4 id="集合的推导式"><a href="#集合的推导式" class="headerlink" title="集合的推导式"></a>集合的推导式</h4><p>集合推导式与列表推导式相似，区别在于列表外侧为**”[]”** ，集合外侧为**”{}”** </p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>​Python中的字典数据和我们平常使用的字典有类似的功能，它以”键值对”的形式组织数据，利用“键”快速查找“值”的过程称为<strong>映射</strong>，Python中的字典是典型的<strong>映射类型</strong>。</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><p>​字典的表现形式为一组包含在大括号**”{}”<strong>中的键值对，每一个键值对为一个字典元素，每个元素通过</strong>逗号<strong>进行分隔，每对键值通过</strong>“:”**分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;键<span class="number">1</span> ：值<span class="number">1</span> ,键<span class="number">2</span> : 值<span class="number">2</span> , ... , 键N : 值N&#125;</span><br></pre></td></tr></table></figure><p>​字典的值可以是任意类型，但键不能是列表或字典类型。字典像集合一样使用 “{}” 包裹元素，同时也具备集合相似的特点：字典元素无序，键&#x2F;值必须唯一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;&#125;<span class="comment"># 创建空字典</span></span><br><span class="line">d2 = &#123; <span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;345&#x27;</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="字典访问"><a href="#字典访问" class="headerlink" title="字典访问"></a>字典访问</h4><p>​字典的值利用键进行访问</p><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典变量[键]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 输出为  123</span></span><br></pre></td></tr></table></figure><h5 id="get-内置方法访问"><a href="#get-内置方法访问" class="headerlink" title="get() 内置方法访问"></a>get() 内置方法访问</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.get(key[,default])</span><br><span class="line"><span class="comment"># 根据键从字典中获取对应的值，若指定的键不存在则返回默认值(default)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;b&#x27;</span>))  <span class="comment"># 输出为 345</span></span><br></pre></td></tr></table></figure><h5 id="keys-方法-获取所有键"><a href="#keys-方法-获取所有键" class="headerlink" title="keys() 方法 获取所有键"></a>keys() 方法 获取所有键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">456</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.keys())  <span class="comment"># 输出为 dict_keys([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span></span><br></pre></td></tr></table></figure><h5 id="values-方法-获取所有值"><a href="#values-方法-获取所有值" class="headerlink" title="values() 方法 获取所有值"></a>values() 方法 获取所有值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">456</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.values())  <span class="comment"># 输出为 dict_values([123, 345, 456])</span></span><br></pre></td></tr></table></figure><h5 id="items-方法-获取所有元素"><a href="#items-方法-获取所有元素" class="headerlink" title="items() 方法 获取所有元素"></a>items() 方法 获取所有元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">456</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.items())   <span class="comment"># 输出为 dict_items([(&#x27;a&#x27;, 123), (&#x27;b&#x27;, 345), (&#x27;c&#x27;, 456)])</span></span><br></pre></td></tr></table></figure><p><strong>keys()</strong> ，<strong>values()</strong> ，<strong>items()</strong> 返回的值都是可迭代对象，可以利用<strong>循环遍历</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">456</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为</span></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">345</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">456</span>)</span><br></pre></td></tr></table></figure><p>ps： 使用下标也可以对迭代对象进行访问</p><h4 id="字典元素的添加和修改"><a href="#字典元素的添加和修改" class="headerlink" title="字典元素的添加和修改"></a>字典元素的添加和修改</h4><p>​字典支持通过为指定的键赋值或使用update()方法添加和修改元素</p><h5 id="字典元素的添加-update"><a href="#字典元素的添加-update" class="headerlink" title="字典元素的添加 update()"></a>字典元素的添加 update()</h5><p>语法格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字典变量 [键] = 值</span><br><span class="line">字典变量.update(键 = 值)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">345</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">456</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;d&#x27;</span>]  = <span class="number">567</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出为  &#123;&#x27;a&#x27;: 123, &#x27;b&#x27;: 345, &#x27;c&#x27;: 456, &#x27;d&#x27;: 567&#125;</span></span><br><span class="line">d.update( e=<span class="number">678</span>)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出为  &#123;&#x27;a&#x27;: 123, &#x27;b&#x27;: 345, &#x27;c&#x27;: 456, &#x27;d&#x27;: 567, &#x27;e&#x27;: 678&#125;</span></span><br></pre></td></tr></table></figure><h5 id="字典元素的修改-update"><a href="#字典元素的修改-update" class="headerlink" title="字典元素的修改 update()"></a>字典元素的修改 update()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.update(已存在的键 = 新值)</span><br></pre></td></tr></table></figure><p>update()方法可添加，可修改</p><h4 id="字典元素的删除"><a href="#字典元素的删除" class="headerlink" title="字典元素的删除"></a>字典元素的删除</h4><h5 id="pop-方法-指定删除字典中的元素"><a href="#pop-方法-指定删除字典中的元素" class="headerlink" title="pop()方法 - 指定删除字典中的元素"></a>pop()方法 - 指定删除字典中的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">345</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">456</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">567</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">678</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(test_d.pop(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># 输出为 123</span></span><br><span class="line"><span class="built_in">print</span>(test_d)  <span class="comment"># 输出为 &#123;&#x27;b&#x27;: 345, &#x27;c&#x27;: 456, &#x27;d&#x27;: 567, &#x27;e&#x27;: 678&#125;</span></span><br></pre></td></tr></table></figure><p>删除成功返回目标元素的值</p><h5 id="popitem-方法-随机删除字典中的元素"><a href="#popitem-方法-随机删除字典中的元素" class="headerlink" title="popitem()方法 - 随机删除字典中的元素"></a>popitem()方法 - 随机删除字典中的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">345</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">456</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">567</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">678</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(test_d.popitem()) <span class="comment"># 输出为 (&#x27;e&#x27;, 678)   是随机删除，输出结果无法固定</span></span><br><span class="line"><span class="built_in">print</span>(test_d) <span class="comment"># 输出为 &#123;&#x27;a&#x27;: 123, &#x27;b&#x27;: 345, &#x27;c&#x27;: 456, &#x27;d&#x27;: 567&#125;  输出结果无法固定</span></span><br></pre></td></tr></table></figure><p>随机删除，若删除成功返回被删除的元素</p><h5 id="clear-方法-清空字典中的元素"><a href="#clear-方法-清空字典中的元素" class="headerlink" title="clear()方法 - 清空字典中的元素"></a>clear()方法 - 清空字典中的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">345</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">456</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">567</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">678</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(test_d.clear()) <span class="comment"># 清空 (None)无返回</span></span><br><span class="line"><span class="built_in">print</span>(test_d) <span class="comment"># 输出为 &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p>​字典推导式与列表推导式类似，区别在于字典推导式外侧符号为 <strong>“{}”</strong></p><h3 id="组合数据类型应用运算符"><a href="#组合数据类型应用运算符" class="headerlink" title="组合数据类型应用运算符"></a>组合数据类型应用运算符</h3><h4 id="“-”-运算符"><a href="#“-”-运算符" class="headerlink" title="“+” 运算符"></a>“+” 运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test_one = <span class="string">&quot;hello&quot;</span></span><br><span class="line">test_tow = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test_one+test_tow)  <span class="comment"># 输出为  helloPython</span></span><br><span class="line">lis_one = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">lis_tow = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(lis_one+lis_tow)  <span class="comment"># 输出为  [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">tuple_one = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">tuple_tow = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple_one+tuple_tow) <span class="comment"># 输出为  (1, 2, 3, 4, 5, 6)</span></span><br></pre></td></tr></table></figure><h4 id="“-”运算符"><a href="#“-”运算符" class="headerlink" title="“*”运算符"></a>“*”运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(test*<span class="number">2</span> )  <span class="comment"># 输出为  [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>将列表扩为原数据的x倍</p><h4 id="“in”-和-“-not-in-“-运算符"><a href="#“in”-和-“-not-in-“-运算符" class="headerlink" title="“in” 和 “ not in “ 运算符"></a>“in” 和 “ not in “ 运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="number">1</span> <span class="keyword">in</span> test) <span class="comment"># 输出为 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> test) <span class="comment"># 输出为 False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串</title>
      <link href="/2022/03/03/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/03/03/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>字符串格式化，字符串查找，替换，分割，拼接，删除，大小写转换，对齐方式 …</p><span id="more"></span><h3 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h3><p>字符串是由字母，符号或数字组成的字符序列</p><p>除此之外，还可以利用反斜杠”\“对引号转义来实现，此时Python解释器就会将其视为一个普通的字符，而非特殊字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;let&#x27;</span>s learn Python<span class="string">&#x27;)  # 不加“\”会报错</span></span><br><span class="line"><span class="string">print(&#x27;</span>let\<span class="string">&#x27;s learn Python&#x27;</span>)  <span class="comment"># 输出为 let&#x27;s learn Python 单引号+斜杠</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;let&#x27;s learn Python&quot;</span>)  <span class="comment"># 输出为 let&#x27;s learn Python 双引号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;let&#x27;s learn Python&quot;&quot;&quot;</span>)  <span class="comment"># 输出为 let&#x27;s learn Python 三个引号</span></span><br></pre></td></tr></table></figure><h3 id="特殊转义字符"><a href="#特殊转义字符" class="headerlink" title="特殊转义字符"></a>特殊转义字符</h3><p>​一些普通字符与斜杠组合后将失去原有意义，产生新的含义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\b  <span class="comment"># 退格</span></span><br><span class="line">\n  <span class="comment"># 换行</span></span><br><span class="line">\v  <span class="comment"># 纵向制表符</span></span><br><span class="line">\t  <span class="comment"># 横向制表符</span></span><br><span class="line">\r  <span class="comment"># 回车</span></span><br></pre></td></tr></table></figure><p>​如果一段字符串中包含多个转义字符，但又不希望转义字符产生作用。可以使用原始字符串，即在字符串开始的引号之前添加r或R，使其<strong>原样输出</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n \b \f&#x27;</span>)  <span class="comment"># 输出为 \n \b \f</span></span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><h4 id="使用-格式化字符串"><a href="#使用-格式化字符串" class="headerlink" title="使用%格式化字符串"></a>使用%格式化字符串</h4><p>字符串具有一种特殊的内置操作，它可以使用%进行格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们班有%d人&#x27;</span>%a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们班有%03d人&#x27;</span>%b)   <span class="comment"># %03d 把这个数变成3位的，空位用0补齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我们班有%d人，平均分%.2f&#x27;</span>%(a,b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们班有100人</span></span><br><span class="line"><span class="comment"># 我们班有001人</span></span><br><span class="line"><span class="comment"># 我们班有100人，平均分1.00</span></span><br></pre></td></tr></table></figure><h5 id="Python中常见的格式符"><a href="#Python中常见的格式符" class="headerlink" title="Python中常见的格式符"></a>Python中常见的格式符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    将对应的数据格式化为</span><br><span class="line">%c<span class="comment"># 字符</span></span><br><span class="line">%s<span class="comment"># 字符串</span></span><br><span class="line">%d<span class="comment"># 整数</span></span><br><span class="line">%u<span class="comment"># 无符号整形 </span></span><br><span class="line">%o<span class="comment"># 无符号八进制数</span></span><br><span class="line">%x<span class="comment"># 无符号十六进制数</span></span><br><span class="line">%f<span class="comment"># 浮点数，可指定小数点后的精度(默认保留6位小数)</span></span><br></pre></td></tr></table></figure><h4 id="使用format-方法格式化字符串"><a href="#使用format-方法格式化字符串" class="headerlink" title="使用format()方法格式化字符串"></a>使用format()方法格式化字符串</h4><p>​虽然使用%号可以对字符串进行格式化，但这种方式并不是很直观，一旦开发人员遗漏了要替换的数据或者选择了不匹配的格式符，就会导致字符串格式化失败。为了能更加直观，便捷的格式化字符串。Python为字符串提供了一个格式化方法 format()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.<span class="built_in">format</span>(values)</span><br><span class="line"><span class="comment"># format()方法格式  </span></span><br><span class="line"><span class="comment"># str表示需要被格式化的字符串 字符串中包含单个或多个为真实数据占位的符号 &quot;&#123;&#125;&quot; </span></span><br><span class="line"><span class="comment"># values表示单个或多个待被替换的真实数据多个数据之间以逗号分隔</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wo = <span class="string">&#x27;我&#x27;</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;爱学习&#x27;</span>.<span class="built_in">format</span>(wo))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;爱学习，&#123;:.2f&#125;岁&#x27;</span>.<span class="built_in">format</span>(wo,age)) <span class="comment"># 字符串中的&#123;&#125;可以指定替换的浮点型数据的精度，按指定精度来格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125;爱学习，&#123;0&#125;岁&#x27;</span>.<span class="built_in">format</span>(age,wo))      <span class="comment"># 字符串的&#123;&#125;可以明确的指定编号，格式化字符串的时会按编号来进行取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;w&#125;爱学习，&#123;t&#125;岁&#x27;</span>.<span class="built_in">format</span>(w=wo,t=age))  <span class="comment"># 字符串&#123;&#125;指定名称，Python解释器会按真实数据绑定的名称替换&#123;&#125;中的变量</span></span><br></pre></td></tr></table></figure><h4 id="使用-f-string-格式化字符串"><a href="#使用-f-string-格式化字符串" class="headerlink" title="使用 f- string 格式化字符串"></a>使用 f- string 格式化字符串</h4><p>​f -string是一种更为简洁的格式化字符串的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入十进制数&#x27;</span>))</span><br><span class="line">xuan = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;1.二进制 2.八进制 3.十进制 4.十六进制&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> xuan == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>,的十进制进制为<span class="subst">&#123;<span class="built_in">bin</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> xuan == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>,的十进制进制为<span class="subst">&#123;<span class="built_in">oct</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> xuan == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>,的十进制进制为<span class="subst">&#123;<span class="built_in">int</span>(num)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> xuan == <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>,的十进制进制为<span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串的常见操作"><a href="#字符串的常见操作" class="headerlink" title="字符串的常见操作"></a>字符串的常见操作</h3><h4 id="字符串的查找与替换"><a href="#字符串的查找与替换" class="headerlink" title="字符串的查找与替换"></a>字符串的查找与替换</h4><h5 id="字符串查找-find"><a href="#字符串查找-find" class="headerlink" title="字符串查找 find"></a>字符串查找 find</h5><p>​Python中提供了实现字符串查找操作的**find()**方法，该方法可查找字符串中是否包含子串，若包含返回字串首次出现的索引位置，若没有找到返回 -1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test.find(sub[,start[,end]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub   指定要查找的字串</span></span><br><span class="line"><span class="comment"># start 开始索引，默认从0开始</span></span><br><span class="line"><span class="comment"># end   结束索引，默认为字符串的长度</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&#x27;12312333&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(test.find(<span class="string">&#x27;1&#x27;</span>))<span class="comment"># 查找1    # 输出结果为 0 </span></span><br><span class="line"><span class="built_in">print</span>(test.find(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>))     <span class="comment"># 查找1 从索引1的位置开始找  # 输出结果为  3</span></span><br><span class="line"><span class="built_in">print</span>(test.find(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))     <span class="comment"># 查找1 从索引2的位置开始找  # 输出结果为  3</span></span><br></pre></td></tr></table></figure><h5 id="字符串替换-replace"><a href="#字符串替换-replace" class="headerlink" title="字符串替换 replace"></a><strong>字符串替换 replace</strong></h5><p>​Python中提供了实现字符串替换操作的<strong>replace()</strong> 方法，该方法可将当前字符串中的指定字符串替换成新子串，并返回替换后的新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.replace(old,new[,count])</span><br><span class="line"></span><br><span class="line"><span class="comment"># old    被替换的旧子串</span></span><br><span class="line"><span class="comment"># new 替换旧子串的新</span></span><br><span class="line"><span class="comment"># count  表示替换旧字符串的次数，默认全部替换</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;abc ABC abc ABC abc&quot;</span></span><br><span class="line">new_string = string.replace(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;AbC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_string)   <span class="comment"># 输出为 AbC ABC AbC ABC AbC</span></span><br></pre></td></tr></table></figure><h4 id="字符串的分割与拼接"><a href="#字符串的分割与拼接" class="headerlink" title="字符串的分割与拼接"></a>字符串的分割与拼接</h4><h5 id="字符串的分割-split"><a href="#字符串的分割-split" class="headerlink" title="字符串的分割 split"></a>字符串的分割 split</h5><p>​split()方法可以按照指定的分割符对字符串进行分割，该方法会返回由分割后的子串组成的<strong>列表</strong> </p><p>split()方法语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.split(sep=<span class="literal">None</span>,maxsplit=-<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># sep 分割符,默认为空字符</span></span><br><span class="line"><span class="comment"># maxsplit  分割次数，默认值为-1,表不限制分割次数</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string_split = <span class="string">&quot; The more efforts you make , the more fortune you get.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string_split.split())         </span><br><span class="line"><span class="comment"># 输出为  [&#x27;The&#x27;, &#x27;more&#x27;, &#x27;efforts&#x27;, &#x27;you&#x27;, &#x27;make&#x27;, &#x27;,&#x27;, &#x27;the&#x27;, &#x27;more&#x27;, &#x27;fortune&#x27;, &#x27;you&#x27;, &#x27;get.&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(string_split.split(<span class="string">&#x27;m&#x27;</span>))    </span><br><span class="line"><span class="comment"># 输出为  [&#x27; The &#x27;, &#x27;ore efforts you &#x27;, &#x27;ake , the &#x27;, &#x27;ore fortune you get.&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(string_split.split(<span class="string">&#x27;e&#x27;</span>,<span class="number">2</span>))  </span><br><span class="line"><span class="comment"># 输出为  [&#x27; Th&#x27;, &#x27; mor&#x27;, &#x27; efforts you make , the more fortune you get.&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="字符串的拼接-join"><a href="#字符串的拼接-join" class="headerlink" title="字符串的拼接 join"></a>字符串的拼接 join</h5><p>​join方法使用指定的字符连接字符串并生成一个新的字符串。</p><p>join()方法语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.join(iterable)</span><br><span class="line"><span class="comment"># iterable 表示连接字符串的字符</span></span><br></pre></td></tr></table></figure><p>举例 使用”*” 连接字符串”Python”中的各个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string_1 = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">string_2 = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(string_1.join(string_2))   <span class="comment"># 输出为 P*y*t*h*o*n</span></span><br></pre></td></tr></table></figure><h6 id="Python中还可以使用运算符”-”进行拼接"><a href="#Python中还可以使用运算符”-”进行拼接" class="headerlink" title="Python中还可以使用运算符”+”进行拼接"></a>Python中还可以使用运算符”+”进行拼接</h6><p>拼接<strong>字符串</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srtring_1 = <span class="string">&#x27;Py&#x27;</span></span><br><span class="line">srtring_2 = <span class="string">&quot;thon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(srtring_1+srtring_2)   <span class="comment"># 输出为 Python</span></span><br></pre></td></tr></table></figure><p>同样也可以对<strong>列表</strong>进行拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srtring_1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">srtring_2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(srtring_1+srtring_2)  <span class="comment"># 输出为 [4, 5, 6, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="删除字符串的指定字符-strip，lstrip，lstrip"><a href="#删除字符串的指定字符-strip，lstrip，lstrip" class="headerlink" title="删除字符串的指定字符  strip，lstrip，lstrip"></a>删除字符串的指定字符  strip，lstrip，lstrip</h4><p>​字符串头部或尾部中可能包含一些无用的字符(比如 空格)，在处理字符串之前往往需要先删除这些无用的字符。</p><table><thead><tr><th align="center">方法</th><th align="center">语法格式</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">strip()</td><td align="center">str.strip([chars])</td><td align="center">移除字符串头部和尾部的指定字符</td></tr><tr><td align="center">lstrip()</td><td align="center">str.lstrip([chars])</td><td align="center">移除字符串头部的指定字符</td></tr><tr><td align="center">rstrip()</td><td align="center">str.rstrip([chars])</td><td align="center">移除字符串尾部的指定字符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string_test = <span class="string">&quot;  Life is short , Use Python !  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;string_test.strip()&#125;</span>&quot;&#x27;</span>)  <span class="comment"># 输出为  &quot;Life is short , Use Python !&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;string_test.lstrip()&#125;</span>&quot;&#x27;</span>) <span class="comment"># 输出为  &quot;Life is short , Use Python !  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;string_test.rstrip()&#125;</span>&quot;&#x27;</span>) <span class="comment"># 输出为  &quot;  Life is short , Use Python !&quot;</span></span><br></pre></td></tr></table></figure><h4 id="字符串大小写转换-upper，lower，capitalize，title"><a href="#字符串大小写转换-upper，lower，capitalize，title" class="headerlink" title="字符串大小写转换 upper，lower，capitalize，title"></a>字符串大小写转换 upper，lower，capitalize，title</h4><p>一些特定的情况会对英文单词的大小写形式有要求，这时就可以用到以下方法</p><table><thead><tr><th align="center">方法</th><th>功能说明</th></tr></thead><tbody><tr><td align="center">upper()</td><td>将字符串内的字母全转换成大写</td></tr><tr><td align="center">lower()</td><td>将字符串内的字母全转换成小写</td></tr><tr><td align="center">capitalize()</td><td>将字符串中第一个字母转换成大写形式</td></tr><tr><td align="center">title()</td><td>将每个单词的首字母转换为大写字母</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_string = <span class="string">&quot;hello Python &quot;</span></span><br><span class="line"><span class="built_in">print</span>(test_string.upper()) <span class="comment"># 输出为 HELLO PYTHON</span></span><br><span class="line"><span class="built_in">print</span>(test_string.lower()) <span class="comment"># 输出为 hello python</span></span><br><span class="line"><span class="built_in">print</span>(test_string.capitalize()) <span class="comment"># 输出为 Hello python</span></span><br><span class="line"><span class="built_in">print</span>(test_string.title()) <span class="comment"># 输出为 Hello Python </span></span><br></pre></td></tr></table></figure><h4 id="字符串对齐-center，ljust，rjust"><a href="#字符串对齐-center，ljust，rjust" class="headerlink" title="字符串对齐 center，ljust，rjust"></a>字符串对齐 center，ljust，rjust</h4><p>​在使用Word处理文档时有时需要对文档的格式进行调整，如标题居中，左对齐，右对齐等。</p><table><thead><tr><th align="center">方法</th><th align="center">语法格式</th><th>功能说明</th></tr></thead><tbody><tr><td align="center">center()</td><td align="center">str.center(width[,fillchar])</td><td>返回长度为width的字符串，原字符串居中显示</td></tr><tr><td align="center">ljust()</td><td align="center">str.ljust(width[,fillchar])</td><td>返回长度为width的字符串，原字符串左对齐显示</td></tr><tr><td align="center">rjust()</td><td align="center">str.rjust(width[,fillchar])</td><td>返回长度为width的字符串，原字符串右对齐显示</td></tr></tbody></table><p>​如果参数width指定的长度小于或等于原字符串长度，那么以上各方法会返回原字符串，参数fillchar表示参数width指定的长度大于原字符串长度时填充的字符，默认填充为空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test_string = <span class="string">&quot;Hello word&quot;</span></span><br><span class="line">test_center = test_string.center(<span class="number">13</span>,<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 长度为13,居中显示,使用 - 补齐</span></span><br><span class="line">test_ljust = test_string.ljust(<span class="number">13</span>,<span class="string">&#x27;*&#x27;</span>)       <span class="comment"># 长度为13,左对齐显示,使用 * 补齐</span></span><br><span class="line">test_rjust = test_string.rjust(<span class="number">13</span>,<span class="string">&#x27;%&#x27;</span>)       <span class="comment"># 长度为13,右对齐显示,使用 % 补齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;居中显示：<span class="subst">&#123;test_center&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;左对齐显示：<span class="subst">&#123;test_ljust&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;右对齐显示：<span class="subst">&#123;test_rjust&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python流程控制</title>
      <link href="/2022/03/01/Python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/03/01/Python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Python 条件语句，循环语句，跳转语句 …</p><span id="more"></span><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>​if语句是最简单的条件语句，该语句由关键字 if,判断条件和冒号组成。if语句和从属于该语句的代码段可组成选择结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;True!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><p>​执行if - else语句时，满足条件执行if后的代码段。不满足条件执行else语句内的代码段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;不执行&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="if-elif-else-语句"><a href="#if-elif-else-语句" class="headerlink" title="if - elif -else 语句"></a>if - elif -else 语句</h4><p>​Python提供的可创建多个分支的if-elif-else语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><p>​if语句内嵌套if语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检票，安检</span></span><br><span class="line">bill = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;是否有票&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> bill:<span class="comment"># 外层判断</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有票&#x27;</span>)</span><br><span class="line">    check = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;是否安全&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> check:<span class="comment"># 内层判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;安全,请上车&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;目的地 拉萨&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不安全&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无票&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><p>​while语句一般用于实现条件循环，该语句由while关键字，循环条件和冒号组成。while语句和从属于该语句的代码段组成循环结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件:</span><br><span class="line">代码段</span><br></pre></td></tr></table></figure><p>循环条件一直为真，代码段内没有能改变循环条件的语句，没有跳转语句的话，代码段就会一直循环执行</p><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 目标对象:</span><br><span class="line">    代码段</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">s = <span class="number">123</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="built_in">print</span>(s)   <span class="comment"># 输出为 1 </span></span><br><span class="line">       <span class="number">2</span></span><br><span class="line">           <span class="number">3</span></span><br></pre></td></tr></table></figure><p>for 语句可以与range()函数搭配，range()函数可以生成一个由整数组成的可迭代对象 (for循环遍历的对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 结果为 01234</span></span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><h5 id="while循环嵌套"><a href="#while循环嵌套" class="headerlink" title="while循环嵌套"></a>while循环嵌套</h5><p>​while循环嵌套是指while语句中嵌套了while或for语句。双重循环的意思</p><p>以while语句中嵌套while语句为列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件:      <span class="comment"># 外层循环</span></span><br><span class="line">代码段<span class="number">1</span><span class="comment"># 可有可无，根据实际情况来</span></span><br><span class="line"><span class="keyword">while</span> 循环条件:  <span class="comment"># 内层循环</span></span><br><span class="line">代码段<span class="number">2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>举例使用while循环嵌套打印一个由”*”组成的6行直角三角形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span> <span class="comment"># 外层循环条件</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">6</span> :   <span class="comment"># 外层循环 用来确定行数</span></span><br><span class="line">    j = <span class="number">0</span> <span class="comment"># 内层循环条件</span></span><br><span class="line">    <span class="keyword">while</span> j  &lt; i: <span class="comment"># 内层循环 用来确定每行打印个数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&quot;&quot;</span>)  <span class="comment"># end为控制表示不换行</span></span><br><span class="line">        j+=<span class="number">1</span> <span class="comment"># 控制打印个数</span></span><br><span class="line">    i+=<span class="number">1</span> <span class="comment"># 控制行数</span></span><br><span class="line">    <span class="built_in">print</span>() <span class="comment"># 内层循环结束后换行</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出为：</span></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br></pre></td></tr></table></figure><h5 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h5><p>for循环嵌套是指for语句 中嵌套了while语句或for语句。 <strong>in</strong> 是 <strong>成员运算符</strong> </p><p>以for语句中嵌套一个for语句为例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 目标对象：  <span class="comment"># 临时变量的初值为0</span></span><br><span class="line">代码段<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 目标对象：<span class="comment"># 临时变量的初值为0</span></span><br><span class="line">代码段<span class="number">2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>举例使用for循环嵌套打印一个由”*”组成的6行直角三角形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>+<span class="number">1</span>):  <span class="comment"># 外层循环，range函数获取循环次数 i的初值为0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i): <span class="comment"># 内层循环</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出为：</span></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br></pre></td></tr></table></figure><p>关于上上方 参数 6 为什么从1 开始 还要进行+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="number">0</span>)</span><br><span class="line">b = <span class="built_in">int</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> <span class="built_in">range</span>(b) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>在<span class="subst">&#123;b&#125;</span>中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不在&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出为  不在</span></span><br></pre></td></tr></table></figure><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><p>​跳出整个循环，若在程序中使用到了 break 语句，程序执行到break 语句时，直接结束整个循环。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span>  <span class="string">&quot;Python&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 遇到直接结束整个循环</span></span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>) <span class="comment"># 输出为  Py</span></span><br></pre></td></tr></table></figure><h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5><p>​跳出当前本次循环，继续下一次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span>  <span class="string">&quot;Python&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 遇到则跳过本次循环</span></span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)   <span class="comment"># 输出为 Pyhon </span></span><br></pre></td></tr></table></figure><h4 id="小练"><a href="#小练" class="headerlink" title="小练"></a>小练</h4><p>“逢7拍手游戏”  输出的数字不能带7 且数字不能是7的倍数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;7&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(i) <span class="keyword">and</span> i%<span class="number">7</span> != <span class="number">0</span>:  <span class="comment"># 7 不在 i 内 and i 不能被7整除</span></span><br><span class="line">        <span class="built_in">print</span>(i,<span class="string">&quot;,&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2022/02/24/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/24/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Python 代码格式，标识符，关键字，变量，数据类型，运算符 ….</p><span id="more"></span><h3 id="Python概述"><a href="#Python概述" class="headerlink" title="Python概述"></a>Python概述</h3><p>​Python是 面向对象的解释型语言，语法很多来自C语言，但又深受ABC语言的影响。自诞生开始，Python已经具有了类，函数，异常处理，列表和字典在内的核心数据类型 ，以及以模块为基础的扩展系统。</p><p>特点： 简洁，语法优美，简单易学，开源，可移植性好，扩展性好，类库丰富，通用灵活，模式多样，良好的中文支持。</p><p>缺点：1.  执行效率不够高，Python程序没有C++，Java编写的程序高效</p><p>​2. Python 3.X 和 Python 2.X 的兼容性不够好。版本之间不兼容</p><h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol><li><p>单行注释</p><p>单行注释独占一行以”#”开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello Python&#x27;</span>)<span class="comment"># 单行注释，打印 Hello Python</span></span><br></pre></td></tr></table></figure><ul><li>为了确保注释的可读性，Python官方建议“#”后面先添加一个空格，再写注释</li></ul></li><li><p>多行注释</p><p>多行注释是由3对双引号或单引号包裹的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是注释，主要用于说明函数或类的功能的时候能用着。多行注释也被称为说明文档。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>​Python代码使用“缩进”(即一行代码之前一段的空白区域)确定代码之间的逻辑关系和层次关系。Python代码的缩进可以通过”Tab”键或者空格键控制。”Tab”键是Python 3 的首选缩进方法，一般使用4个空格表示一级缩径。</p><h4 id="语句换行"><a href="#语句换行" class="headerlink" title="语句换行"></a>语句换行</h4><p>​Python官方建议每行代码不超过79个字符，若代码过长应该换行。</p><p>​Python会将圆括号，中括号，大括号中的行进行隐式连接，从而实现长语句跨行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = (<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;test4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;test4&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ol><li>以数字 字母 下划线组成，且不能以数字开头</li><li>标识符区分大小写。</li><li>不允许开发人员使用关键字作为标识符</li><li>尽量见名知意</li></ol><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>​关键字是Python已经使用的，是不允许开发人员重复定义的标识符。Python 3 中共定义了35个关键字，每个关键字都有不同作用，这些关键字都存储在keyword模块的变量 kwlist 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)   <span class="comment"># 通过查看变量kwlisr可查看Python中的关键字</span></span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>​标识内存单元的标识符名称又称为变量名。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>数字类型</p><p>​整型(int)，浮点型(float)，复数类型(complex)，布尔类型(bool) 。bool类型比较特殊，它是int的子类，只有True和False两种取值</p><ol><li><p>字符串</p><p>字符串是一个由单引号，多引号或者三引号包裹的有序的字符集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&#x27;abc&#x27;</span>  <span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test)) &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>列表</p><p>列表是多个元素的集合，它可以保存任意数量，任意类型的元素，且可以被修改。</p><p>Python中使用”[]” 创建列表，列表中的元素以逗号分割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>]<span class="comment"># 列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test)) &lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>元组</p><p>元组与列表的作用相似，它可以保存任意数量，任意类型的元素，但不可以被修改。</p><p>Python中使用”()”创建元组，元组中的元素以逗号分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>)<span class="comment"># 元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test)) &lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>集合</p><p>集合与列表，元组相似，也可以保存任意数量，任意类型的元素，区别在于集合使用”{}”创建，集合中的元素无序且唯一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>&#125;<span class="comment"># 集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test)) &lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>字典<br>字典中的元素是”键(Key):值(Value)”形式的键值对，键不能重复。</p><p>Python中使用”{}”创建字典，字典中的各元素以逗号分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>&#125;<span class="comment"># 字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test))&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="变量的输入与输出"><a href="#变量的输入与输出" class="headerlink" title="变量的输入与输出"></a>变量的输入与输出</h4><ol><li><p>input() 函数能实现交互功能，用于接收用户键盘输入数据，返回一个字符串(str)类型的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">input</span>(<span class="string">&#x27;请随便输入&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test))</span><br><span class="line">请随便输入<span class="number">1</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>input()输入函数从键盘输入的数值类型是字符串(str)类型。</li></ul></li><li><p>print() 函数</p><p>print()函数用于向控制台中输出数据，它可以输出任何类型的数据，其语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects，sep=<span class="string">&#x27;&#x27;</span>,end=<span class="string">&#x27;\n&#x27;</span>,file=sys.stdout)</span><br><span class="line"><span class="comment"># objects: 表示输出的对象。输出多个对象时，对象之间需要用分隔符分隔。</span></span><br><span class="line"><span class="comment"># sep： 用于设定分隔符，默认使用空格作为分隔。</span></span><br><span class="line"><span class="comment"># end:  用于设定输出以什么结尾，默认值为换行符&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># file: 表示书记输出的文件对象 </span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><h4 id="整数类型-int"><a href="#整数类型-int" class="headerlink" title="整数类型(int)"></a>整数类型(int)</h4><p>​整数类型(int)简称整型，它用于表示整数，如 10 101 等。Python 3 中整型数据的长度没有限制，只要计算机的内存足够大，用户就无须考虑内存溢出的问题。</p><p>​整型数据常用的计数方式有四种：</p><ol><li><p>**二进制  (bin) ** </p><p>以”0b”或者”0B”开头</p></li><li><p>**八进制  (oct) ** </p><p>以”0o”或者”0O”开头</p></li><li><p><strong>十进制  (int)</strong>  ，<strong>十六进制  (hex)</strong> </p><p>以”0x” 或者”0X” 开头</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">bin</span>(<span class="number">10</span>) <span class="comment"># 转二进制    0b1010</span></span><br><span class="line">test = <span class="built_in">oct</span>(<span class="number">10</span>) <span class="comment"># 转八进制    0o12</span></span><br><span class="line">test = <span class="built_in">int</span>(<span class="number">10</span>) <span class="comment"># 转十进制 10</span></span><br><span class="line">test = <span class="built_in">hex</span>(<span class="number">10</span>) <span class="comment"># 转十六进制  0xa</span></span><br></pre></td></tr></table></figure><h4 id="浮点型-flog"><a href="#浮点型-flog" class="headerlink" title="浮点型(flog)"></a>浮点型(flog)</h4><p>​浮点型用于表示实数，实数由整数部分，小数点，小数部分组成。浮点数一般以十进制表示。</p><p>​较大或者较小的浮点数可以使用科学计数法表示。科学计数法会把一个数表示成a与10的n次幂相乘的形式。</p><p><img src="https://img-blog.csdnimg.cn/0eecc703d2cc432d89f9ae60562aab9c.png" alt="科学计数法格式"></p><p>​Python中使用字母e或者E代表底数10，示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3.14e2</span>  <span class="comment"># 即 -314</span></span><br><span class="line"><span class="number">3.14e-3</span>  <span class="comment"># 即 0.00314</span></span><br></pre></td></tr></table></figure><p>​Python中浮点是双精度的，每个浮点型数据占8个字节(即64位)，其中52位用于存储尾数，11位用于存储阶码，剩余一位用于存储符号。Python中浮点数的取值范围为 -1.8e308 ~ 1.8e308 ，若超出范围 Python则会将值视为无穷大(inf)或者无穷小(-inf)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="number">1.8e308</span></span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line">inf   <span class="comment"># 无穷大</span></span><br><span class="line"></span><br><span class="line">test = -<span class="number">1.8e308</span></span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line">-inf  <span class="comment"># 无穷小</span></span><br></pre></td></tr></table></figure><h4 id="复数类型-complex"><a href="#复数类型-complex" class="headerlink" title="复数类型(complex)"></a>复数类型(complex)</h4><p>​复数由<strong>实部</strong>和<strong>虚部</strong>组成，一般形式为 <strong>real + imagj</strong> ，其中 <strong>real</strong>为<strong>实部</strong>，<strong>imagj</strong>为<strong>虚部</strong> ，<strong>j</strong> 为<strong>虚部单位</strong>。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_one = <span class="number">1</span> + <span class="number">2j</span><span class="comment"># 实部为1 虚部为2</span></span><br><span class="line">test_two = <span class="number">2j</span><span class="comment"># 实部为0 虚部为2</span></span><br><span class="line"><span class="built_in">print</span>( test_one + test_two )   <span class="comment"># 输出结果为  (1+4j)</span></span><br></pre></td></tr></table></figure><p>​通过<strong>real</strong>和<strong>imag</strong>属性可以单独获取复数到<strong>实部</strong>和<strong>虚部</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line"><span class="built_in">print</span>( test.real )   <span class="comment"># 获取复数实部输出结果为 1.0</span></span><br><span class="line"><span class="built_in">print</span>( test.imag )   <span class="comment"># 获取复数虚部输出结果为 2.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test.real),<span class="built_in">type</span>(test.imag))<span class="comment"># 获取到的数值类型均为浮点型(float)</span></span><br></pre></td></tr></table></figure><h4 id="布尔类型-bool"><a href="#布尔类型-bool" class="headerlink" title="布尔类型(bool)"></a>布尔类型(bool)</h4><p>​布尔类型(bool) 是一种特殊的整形，其值True对应整数1，False对应整数0。</p><p>​Python中常见的布尔值为False的数据如下</p><ul><li>None</li><li>False</li><li>任何数字类型的0，如 0 ，0.0 , 0j </li><li>任何空序列，如 “”，() ，[]</li><li>空字典，如 {}</li></ul><p>​Python中可以使用 bool() 函数来检测数据的布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))<span class="comment"># 输出为 False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0j</span>))<span class="comment"># 输出为 False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(&#123;&#125;))<span class="comment"># 输出为 False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))<span class="comment"># 输出为 True</span></span><br></pre></td></tr></table></figure><h4 id="数字类型转换"><a href="#数字类型转换" class="headerlink" title="数字类型转换"></a>数字类型转换</h4><p>​Python内置了一系列可强制转换数据类型的函数，使用这些函数可将目标数据转换为指定的类型，其中用于转换数字类型的函数有**int()<strong>，</strong>float()<strong>，</strong>complex()**，需要注意的是，浮点类型数据转换为整型数据时只保留整数部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(int(x,base)) x字符串代表的base进制数据转换成整型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">10</span>))<span class="comment"># 输出为 0b1010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;0b1010&#x27;</span>,<span class="number">2</span>))<span class="comment"># 输出为 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">10</span>))<span class="comment"># 输出为 (10+0j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">10</span>))<span class="comment"># 输出为 10.0</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">功能说明</th><th>示例 a &#x3D; 2, b &#x3D; 8</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>a + b 输出结果为 10</td></tr><tr><td align="center">-</td><td align="center">减</td><td>a - b 输出结果为 -6</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>a * b 输出结果为 16</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>a &#x2F; b  输出结果为 0.25</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td>a &#x2F;&#x2F; b 输出结果为 0</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>a % b 输出结果为  0</td></tr><tr><td align="center">**</td><td align="center">幂</td><td>a ** b 输出结果为 256</td></tr></tbody></table><ul><li>整型与浮点型进行混合运算时，将整型转换为浮点数</li><li>其他类型与复数类型运算时，将其他类型转换为复数类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="number">1</span> + <span class="number">1.0</span>)<span class="comment"># 整型与浮点型混合运算  输出结果为 2.0&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + (<span class="number">3</span>+ <span class="number">5j</span>))<span class="comment"># 其他类型与复数运算时  输出结果为 (4+5j)&lt;class &#x27;complex&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>​赋值运算符的作用是将一个表达式或对象赋值给一个左值。左值是指一个能位于赋值运算符左边的表达式，它通常是一个可修改的变量，不是一个常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3</span> <span class="comment"># 将右边的 3 赋值给左边的 num</span></span><br></pre></td></tr></table></figure><p>​赋值运算符允许同时为多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = y = z = <span class="number">1</span><span class="comment"># 变量 x，y，z 均赋值为 1</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span><span class="comment"># 变量a 赋值为 1 ，变量b 赋值为 2</span></span><br></pre></td></tr></table></figure><h5 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h5><p>​**+&#x3D;<strong>，</strong>-&#x3D;<strong>，</strong>*&#x3D;<strong>，</strong>&#x2F;&#x3D;<strong>，</strong>&#x2F;&#x2F;&#x3D;<strong>，</strong>%&#x3D;<strong>，</strong> <strong>&#x3D;</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num 复合赋值运算符 2  等价于 num = num 复合赋值运算符 2   # 将 “复合赋值运算符” 进行替换</span><br></pre></td></tr></table></figure><h5 id="海象运算符"><a href="#海象运算符" class="headerlink" title="海象运算符"></a>海象运算符</h5><p>​Python 3.8 中新增的赋值运算符  “ :&#x3D; ” (海象运算符) ，该运算符用于在表达式内部为变量赋值，因形似海象的眼睛和长牙而得此命名。海象运算符的用法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_one = <span class="number">1</span></span><br><span class="line">result = num_one + (num_tow:=<span class="number">2</span>)   <span class="comment"># 直接为 num_tow 赋值为 2</span></span><br><span class="line"><span class="built_in">print</span>(result)<span class="comment"># 输出的结果为 3</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>​比较运算符也叫关系运算符，用于比较两个数值以判断他们之间的关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==  # 等于 比较两边值是否相等 </span><br><span class="line">!=# 不等于 ...</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 大于 ...</span></span></span><br><span class="line">&lt;# 小于 ...</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">=<span class="comment"># 大于等于 ...</span></span></span><br><span class="line">&lt;=# 小于等于 ...</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>and,or,not</p><p>x &#x3D; 10 ， y &#x3D; 20</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>功能说明</th><th>示例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>若两个操作数的布尔值均为True，则结果为y</td><td>x and y 结果为20</td></tr><tr><td>or</td><td>x or y</td><td>若两个操作数的布尔值均为True，则结果为x</td><td>x or y 结果为10</td></tr><tr><td>not</td><td>not x</td><td>若操作数的布尔值为True，则结果为False</td><td>not x结果为False</td></tr></tbody></table><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>​成员运算符 <strong>in</strong> 和 <strong>not in</strong> 用于测试给定数据是否存在于序列(如列表,字符串)中</p><ol><li>in：如果指定元素在序列中返回True，否则返回False。</li><li>not in ：如果指定元素不在列表中返回True，否则返回False。</li></ol><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>​位运算符用于按二进制位进行逻辑运算，操作数必须为整数。</p><h5 id="按位左移运算符-左移n位相当于将操作数乘以2的n次方"><a href="#按位左移运算符-左移n位相当于将操作数乘以2的n次方" class="headerlink" title="按位左移运算符 - 左移n位相当于将操作数乘以2的n次方"></a>按位左移运算符 - 左移n位相当于将操作数乘以2的n次方</h5><p>​按位左移是指将二进制形式操作数的所有位全部左移n位，高位丢齐，低位补0 </p><p>​以十进制 9 为例，9 转换为二进制后是 00001001 将转换后的二进制数左移4位其结果为 10010000</p><p>左移n位相当于将操作数乘以2的n次方 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span></span><br><span class="line">b = <span class="built_in">bin</span>(a&lt;&lt;<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出为  0b10010000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(b,<span class="number">2</span>)) <span class="comment"># 二进制转换为十进制  输出为   144</span></span><br></pre></td></tr></table></figure><h5 id="按位右移运算符-右移n位相当于操作数除以2的n次方"><a href="#按位右移运算符-右移n位相当于操作数除以2的n次方" class="headerlink" title="按位右移运算符 - 右移n位相当于操作数除以2的n次方"></a>按位右移运算符 - 右移n位相当于操作数除以2的n次方</h5><p>​按位右移是指将二进制形式操作数的所有位全部右移n位，低位丢弃，高位补0 </p><p>​以十进制 8 为例 ，8 转换为二进制是 00001000 将其转换后的二进制数右移2位 结果为 00000010</p><p>右移n位相当于操作数除以2的n次方，根据原理可以借助除法运算符来实现右移功能， </p><p>10 右移动 3位 等价于 10 ÷ 2^3  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">8</span></span><br><span class="line">b = <span class="built_in">bin</span>(a&gt;&gt;<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">8</span>))  <span class="comment"># 输出为  0b1000</span></span><br><span class="line"><span class="built_in">print</span>(b)   <span class="comment">#  输出为  0b10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(b,<span class="number">2</span>)) <span class="comment"># 输出为 2</span></span><br></pre></td></tr></table></figure><h5 id="按位与运算符"><a href="#按位与运算符" class="headerlink" title="按位与运算符"></a>按位与运算符</h5><p>​按位与运算是将参与运算的的两个操作数对应的二进制位进行”与”操作，当对应的两个二进制位均为1时，就为1，否则为0 。</p><p>​以十进制 9 和 3 为例，将他们转换后 分别是00001001 和 00000011 与运算后为 00000001</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a))   <span class="comment"># 输出为  00001001</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(b))   <span class="comment"># 输出为  00000011</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a&amp;b)) <span class="comment"># 输出为  00000001</span></span><br></pre></td></tr></table></figure><h5 id="按位或运算符"><a href="#按位或运算符" class="headerlink" title="按位或运算符"></a>按位或运算符</h5><p>​按位或运算是指将参与运算的两个操作数对应的二进制位进行 “或” 操作，若两个对应的二进制位有一个为1时结果就为1，若参与运算的数值为负数，参与运算的两个数均已补码出现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span>     <span class="comment"># 00001001</span></span><br><span class="line">b = <span class="number">3</span>     <span class="comment"># 00000011</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a|b)) <span class="comment"># 输出为 00001011</span></span><br></pre></td></tr></table></figure><h5 id="按位异或运算符"><a href="#按位异或运算符" class="headerlink" title="按位异或运算符"></a>按位异或运算符</h5><p>​按位异或运算是指将参与运算的两个操作数对应的二进制位进行”异或”操作，当对应的两个二进制位中有一个为1，另一个为0时，结果位为1，否则结果为0 。</p><p>​以二进制 8 和4 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">8</span>        <span class="comment"># 00001000</span></span><br><span class="line">b = <span class="number">4</span>     <span class="comment"># 00000100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a^b))  <span class="comment"># 输出为 00001100</span></span><br></pre></td></tr></table></figure><h5 id="按位取反运算符"><a href="#按位取反运算符" class="headerlink" title="按位取反运算符"></a>按位取反运算符</h5><p>按位取反是指将二进制的每一位进行取反，0取反为1,1取反为0。按位取反操作首先会获取这个数的补码，然后对其补码进行取反，最后将取反结果转换为原码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(~a) -<span class="number">21</span>  <span class="comment"># ~x 值为 -x-1</span></span><br></pre></td></tr></table></figure><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>从高到低排序</p><table><thead><tr><th align="center">运算符</th><th>描述</th></tr></thead><tbody><tr><td align="center">**</td><td>幂(最高优先级)</td></tr><tr><td align="center">*  &#x2F;  %  &#x2F;&#x2F;</td><td>乘，除，取模，取余</td></tr><tr><td align="center">+ -</td><td>加，减</td></tr><tr><td align="center">&gt;&gt; &lt;&lt;</td><td>按位右移，按位左移</td></tr><tr><td align="center">&amp;</td><td>按位与</td></tr><tr><td align="center">^，|</td><td>按位异或，按位或</td></tr><tr><td align="center">&#x3D;&#x3D;，!&#x3D;，&gt;&#x3D;，&gt;，&lt;&#x3D;，&lt;</td><td>比较运算符</td></tr><tr><td align="center">in ，not in</td><td>成员运算符</td></tr><tr><td align="center">not ，and，or</td><td>逻辑运算符</td></tr><tr><td align="center">&#x3D;</td><td>赋值运算符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器</title>
      <link href="/2021/12/21/Docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/21/Docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><p>容器 在隔离环境内运行的一个进程进程停止容器就会销毁 </p><p>容器共用宿主机内核，轻量级，损耗x小，启动快，性能高，容易维护和扩展，但只能运行linux系统 </p><p>容器技术过程发展:ch root 技术 → Linux容器(lxc) </p><p>docker 容器引擎 用来管理容器的工具 GO语言开发</p><p>docker仓库地址: hub.docker.com</p><p>douker国内镜像下载加速地址 <a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><h5 id="centos-7-安装docker"><a href="#centos-7-安装docker" class="headerlink" title="centos 7 安装docker"></a>centos 7 安装docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config  #安全机制</span><br><span class="line">systemctl stop firewalld&amp;&amp;systemctl disable firewalld  #防火墙</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #官方的有点慢</span><br><span class="line">    </span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #国内阿里云</span><br><span class="line">    </span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io  </span><br><span class="line"></span><br><span class="line">systemctl start docker &amp;&amp; systemctl enable docker #启动docker</span><br><span class="line"></span><br><span class="line">docker run hello-world  #创建容器</span><br><span class="line">systemctl status docker #查看状态</span><br><span class="line">docker info #查看docker信息</span><br><span class="line"></span><br><span class="line"> vi /etc/docker/docker.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://84ebsy2o.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> echo &quot;&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://84ebsy2o.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;&quot; &gt;&gt; /etc/docker/docker.json</span><br></pre></td></tr></table></figure><p>修改配置文件后得重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line">加载配置可执行可不执行        docker重启</span><br><span class="line">docker info #查看docker配置信息</span><br><span class="line"></span><br><span class="line">docker pull hello-world #拉取镜像 拉取成功就是配置好了</span><br></pre></td></tr></table></figure><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker search alpine  #docker搜索alpine镜像</span><br><span class="line">docker pull alpine #下载最新alpine镜像</span><br><span class="line">docker images #查看本地镜像</span><br><span class="line">docker tag ... #打标签</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发布到远程仓库，得登录账号，没账号就自己键</span></span><br><span class="line">docker login #登录 登录成功后账户会写入 根目录下 cat .docker/config.json</span><br><span class="line">docker push 镜像名称/版本 #推送到远程仓库，推送需要指定版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker rmi -f <code>IMAGE ID</code> 删除所有<code>IMAGE ID</code>相同的镜像</p><p>docker rmi <code>REPOSITORY</code>+<code>TAG</code> 删除指定的镜像的指定标签</p><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器:"></a>docker容器:</h2><p>容器是通过镜像来启动的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker ps #查看本机上运行的容器</span><br><span class="line">docker ps -a #可以查看销毁的容器也可以查看在运行的容器</span><br><span class="line"></span><br><span class="line">启动docker容器</span><br><span class="line">docker run命令格式:</span><br><span class="line">-i:表示启动一个可交互式的容器，并持续打开标准输入</span><br><span class="line">-t:表示使用终端关联到容器的标准输入输出上</span><br><span class="line">-ti：表示启动一个可交互式容器 </span><br><span class="line">-d:表示容器放置后台运行</span><br><span class="line">--rm:退出后即删除容器 </span><br><span class="line">--name:表示定义容器唯一名称</span><br><span class="line">IMAGE:表示要运行的镜像 </span><br><span class="line">COMMAND:表示启动容器时要运行的命令</span><br></pre></td></tr></table></figure><p>尝试启动一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti 32131241  /bin/bash  #相当于启动了一个操作系统 精简版的操作系统 </span><br><span class="line">docker run -ti --name 随便起名 容器名:版本 /bin/bash  #给容器弄个名字区分 </span><br><span class="line">在容器内exit即可退出容器</span><br></pre></td></tr></table></figure><p><code>Ctrl</code>+<code>P</code>+<code>q</code> :退出容器不销毁 #就是挂后台运行呗</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti 容器名称/容器id /bin/bash #进入挂起的容器 使用exit退出不会使得容器销毁关机，相当于远程连接了一下</span><br><span class="line">docker attach 容器 #进入容器再exit退出后会停止容器，</span><br></pre></td></tr></table></figure><h5 id="容器启动-停止-重启"><a href="#容器启动-停止-重启" class="headerlink" title="容器启动 停止 重启"></a>容器启动 停止 重启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start CONTAINER ID </span><br><span class="line">docker stop CONTAINER ID </span><br><span class="line">docker restart CONTAINER ID </span><br></pre></td></tr></table></figure><h5 id="容器删除"><a href="#容器删除" class="headerlink" title="容器删除"></a>容器删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm CONTAINER ID   #删除停止的容器</span><br><span class="line">docker rm -f CONTAINER ID  #强制删除容器</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f status=exited #查询所有退出的容器</span><br><span class="line">docker ps -qf status=exited #查询所有退出的容器的id</span><br><span class="line">docker rm -f $(docker images -q) #删除所有镜像  </span><br><span class="line">docker rm $(docker ps -qf status=exited) #删除所有的已退出的容器</span><br></pre></td></tr></table></figure><h5 id="容器日志查询"><a href="#容器日志查询" class="headerlink" title="容器日志查询"></a>容器日志查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs CONTAINER-ID  #查看容器操作日志</span><br><span class="line">docekr logs -tf --tial 10 container-id #显示最新number条</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker top container-id #查看容器内部的进程信息</span><br><span class="line">docker inspect container-id  #查看容器信息</span><br></pre></td></tr></table></figure><h5 id="给运行的容器改名字"><a href="#给运行的容器改名字" class="headerlink" title="给运行的容器改名字"></a>给运行的容器改名字</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename 容器ID/容器名 新容器名</span><br></pre></td></tr></table></figure><p>容器CPU 内存统计信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats 容器名/容器id</span><br></pre></td></tr></table></figure><h5 id="Docker打印镜像信息"><a href="#Docker打印镜像信息" class="headerlink" title="Docker打印镜像信息"></a>Docker打印镜像信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 镜像名/镜像id | head -10</span><br></pre></td></tr></table></figure><h5 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h5><h6 id="列举所有的网络"><a href="#列举所有的网络" class="headerlink" title="列举所有的网络"></a>列举所有的网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                  DRIVER              SCOPE</span><br><span class="line">17c77e3685d9        bridge                bridge              local</span><br><span class="line">29d6eb1e13be        harbor_harbor         bridge              local</span><br><span class="line">ed53d99d3932        harbor_harbor-clair   bridge              local</span><br><span class="line">a93f3b44dd78        host                  host                local</span><br><span class="line">c0760e4e0218        none                  null                local</span><br></pre></td></tr></table></figure><h6 id="docker命令查询某个网络的所有详情"><a href="#docker命令查询某个网络的所有详情" class="headerlink" title="docker命令查询某个网络的所有详情"></a>docker命令查询某个网络的所有详情</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect bridge  #查bridge的网络详情</span><br></pre></td></tr></table></figure><h6 id="docker创建网络"><a href="#docker创建网络" class="headerlink" title="docker创建网络"></a>docker创建网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 网段/24 --gateway 网关 my_net2 #手动创建</span><br><span class="line">docker network rm 网卡名</span><br></pre></td></tr></table></figure><h6 id="docker查看容器映射端口"><a href="#docker查看容器映射端口" class="headerlink" title="docker查看容器映射端口"></a>docker查看容器映射端口</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port 容器名/容器id</span><br></pre></td></tr></table></figure><h5 id="docker查询当前系统使用的卷组信息"><a href="#docker查询当前系统使用的卷组信息" class="headerlink" title="docker查询当前系统使用的卷组信息"></a>docker查询当前系统使用的卷组信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls </span><br></pre></td></tr></table></figure><h5 id="容器转换为镜像"><a href="#容器转换为镜像" class="headerlink" title="容器转换为镜像"></a>容器转换为镜像</h5><p>镜像是没有写入权限的但是可以把修改操作过后的容器制作成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器名称/容器id imagesname</span><br></pre></td></tr></table></figure><h5 id="镜像导入导出"><a href="#镜像导入导出" class="headerlink" title="镜像导入导出"></a>镜像导入导出</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker push 镜像名称/版本 #推送到自己的仓库</span><br><span class="line">docker save imageid/imagename &gt; name.tar #镜像制作成tar文件</span><br><span class="line">docker load &lt; name.tar #导入镜像</span><br><span class="line">导入的镜像是没有repository和tag的可以使用tag给它添加</span><br></pre></td></tr></table></figure><h5 id="容器和主机间的数据拷贝"><a href="#容器和主机间的数据拷贝" class="headerlink" title="容器和主机间的数据拷贝"></a>容器和主机间的数据拷贝</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">拷贝前容器得是开机的</span><br><span class="line">docker cp /root/filename 容器id:容器内路径  #主机拷贝到容器</span><br><span class="line">docker cp . 容器id:/容器内路径 #当前文件夹内所有文件拷贝到容器</span><br><span class="line">docker cp 容器id:容器内路径 /主机路径 #容器内文件拷贝到主机</span><br></pre></td></tr></table></figure><h5 id="部署nignx"><a href="#部署nignx" class="headerlink" title="部署nignx"></a>部署nignx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker -ti -name nginx11 镜像id /bin/bash</span><br><span class="line"></span><br><span class="line">curl 地址 #访问地址</span><br><span class="line">主机内访问可以使用端口映射 -p</span><br><span class="line">docker run -ti -d --name nginx11 -p 81:80 imageid #主机外的端口映射到容器内的端口</span><br></pre></td></tr></table></figure><h6 id="Ubuntu系列的linux软件安装命令"><a href="#Ubuntu系列的linux软件安装命令" class="headerlink" title="Ubuntu系列的linux软件安装命令"></a>Ubuntu系列的linux软件安装命令</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update #更新源</span><br><span class="line">apt-get install -y vim #安装vim软件</span><br></pre></td></tr></table></figure><h5 id="docker-数据卷挂载"><a href="#docker-数据卷挂载" class="headerlink" title="docker 数据卷挂载"></a>docker 数据卷挂载</h5><p>数据可以存到本地，数据共享，将容器内的目录挂载到物理机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls #主机内查询挂载情况</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name=volume #创建卷组</span><br><span class="line">指定路径挂载</span><br><span class="line">docker run -v 容器外目录：容器内的目录 容器id  #目录映射，相当于Windows里面的共享文件夹</span><br><span class="line">匿名挂载：</span><br><span class="line">docker run -v 容器内目录 容器id</span><br><span class="line">具名挂载：</span><br><span class="line">docker run -ti -d --name centos_juming -v name:/root 镜像id</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名  #查看容器信息</span><br></pre></td></tr></table></figure><p>在挂载目录内增删改查都会与容器内目录同步，可以不进入容器进行操作</p><h5 id="docker-运行容器传递环境变量"><a href="#docker-运行容器传递环境变量" class="headerlink" title="docker 运行容器传递环境变量"></a>docker 运行容器传递环境变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -e 变量名=变量值 容器id</span><br><span class="line">docker run -ti -e JAVA_HOME=aaas jfdaklgffgk000g printenv</span><br></pre></td></tr></table></figure><p>容器之间的配置信息的传递，数据卷容器的</p><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><p>​用来构建docker镜像的脚本文件，命令参数脚本 生成dockerimages，docker容器就是dockerimage启动而来。</p><h6 id="dockerfile命令"><a href="#dockerfile命令" class="headerlink" title="dockerfile命令"></a>dockerfile命令</h6><p>基础知识：</p><pre><code>   1. 每个保留关键字指令都必须是大写字母   2. 执行从上到下顺序执行   3. `#`在文件内表示注释   4. 每一个指令都会创建提交一个新的镜像层，并提交   5. dockerfile是面向开发的，做镜像，就是编写dockerfile文件   6. dockerfile：构建文件，定义步骤，源代码   7. dockerimages：通过dockerfile构建生成镜像，发布   8. 容器就是使用镜像运行起来的，在里面向外提供一些服务的服务器</code></pre><p>dockerfile的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM # 指定基础镜像，一切从此开始构建</span><br><span class="line">MAINTAINER# 镜像作者（名字+邮箱）</span><br><span class="line">RUN # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 添加内容</span><br><span class="line">WORKDIR# 镜像工作目录</span><br><span class="line">VOLUME# 挂载目录</span><br><span class="line">EXPOSE# 端口</span><br><span class="line">CMD# 指定启动时就运行的命令</span><br><span class="line">ENTRYPOINT #</span><br><span class="line">ONBUILD# </span><br><span class="line">COPY# 类似ADD 将文件拷贝到镜像</span><br><span class="line">ENV# 构建时设置环境变量</span><br></pre></td></tr></table></figure><h3 id="Docker网络-1"><a href="#Docker网络-1" class="headerlink" title="Docker网络"></a>Docker网络</h3><p>​docker0(路由器)</p><p>​使用的是docker的桥接技术，都是接到docker0，容器之间通信都是通过veth技术来实现，docker中所有的容器的网络接口都是虚拟的，</p><blockquote><p>– link</p></blockquote><p>容器内ping 其他容器加上 –link是可以直接ping通的</p><p>实际上是在容器内的&#x2F;etc&#x2F;hosts 内增加了映射关系</p><p>docker0不支持通过容器名访问</p><h5 id="自定义网络："><a href="#自定义网络：" class="headerlink" title="自定义网络："></a>自定义网络：</h5><p>docker network ls #查看网络</p><p>网络模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bridge ： 桥接模式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker0是默认的，不支持域名访问，</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 学习笔记</title>
      <link href="/2021/11/12/Kubernetes%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/12/Kubernetes%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>容器的管理问题统称容器编排问题</p><p>自我修复，弹性伸缩，服务发现，负载均衡，版本退回，存储编排</p><p><img src="https://img-blog.csdnimg.cn/38d4e86d36154b76904d5d5819764cc5.png" alt="docker ps 测试"></p><h4 id="yaml语法"><a href="#yaml语法" class="headerlink" title="yaml语法"></a>yaml语法</h4><ol><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>保持左对齐</li><li>低版本缩进不支持Tab 只支持空格</li><li>用#注释</li></ol><p>支持的数据类型：</p><p>​纯量：简单的数值，字符串，布尔值，整数，浮点数，null，时间，日期</p><p>​对象：数值对的集合，又称为映射、哈希，字典</p><p>​数组：一组按次序排列的值，又称为序列，列表</p><h5 id="资源管理方式"><a href="#资源管理方式" class="headerlink" title="资源管理方式"></a>资源管理方式</h5><p> 命令式对象管理：直接用命令去操作k8s资源</p><p> 命令式对象配置：通过命令去配置和配置文件去操作k8s</p><p>申明式对象配置：通过apply命令和配置文件操作k8s</p><p>​apply 没有创建的时候就创建，创建了的话就更新</p><h4 id="kubectl命令"><a href="#kubectl命令" class="headerlink" title="kubectl命令"></a>kubectl命令</h4><p>​是k8s集群的命令行工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl version #查看版本</span><br><span class="line">cluster-info #集群信息</span><br><span class="line">get nodes #查看节点</span><br><span class="line">describe</span><br></pre></td></tr></table></figure><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>​namespace是k8s系统中的一种非常重要的资源主要作用是用来实现多套环境的资源隔离，多租户资源的隔离，相当于分组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ns #查看所有namespace +上空间名称看出空间内的资源</span><br><span class="line">default #默认空间</span><br><span class="line">kubectl create ns name  #创建该名称空间</span><br><span class="line">kubectl delete ns namespace #删除该名称空间</span><br><span class="line"></span><br><span class="line">yaml文件创建</span><br><span class="line">首先得有一个yaml文件，文件内写好了配置</span><br><span class="line"></span><br><span class="line">kubectl create -f filename.yaml #以yaml内配置信息创建一个namespace</span><br><span class="line">kubectl delete -f filename.yuml #删除namespace</span><br></pre></td></tr></table></figure><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><p> pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在pod中，pod可以认为是容器的封装，一个pod中可以存在一个或多个容器</p><p>pod → 容器 → 程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx --port=80 #通过pod控制器创建</span><br><span class="line">kubectl run nginx --image=nginx --namespace ddd #创建到ddd内</span><br><span class="line">kubectl get pod nginx -o wide #查看 </span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl get pod --namespace ddd  #查看ddd内的pod</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx   1/1     Running   0          100s</span><br><span class="line"></span><br><span class="line">kubectl get pod --namespace ddd -o wide #查看pod信息</span><br><span class="line"></span><br><span class="line">kubectl describe pod nginx #查看pod详情</span><br><span class="line">kubectl describe pod --namespace ddd</span><br><span class="line"></span><br><span class="line">kubectl get deployment -n ddd #查看pod控制器</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pod创建信息</span></span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age    From               Message</span><br><span class="line">  ----    ------     ----   ----               -------</span><br><span class="line">  Normal  Scheduled  4m4s   default-scheduler  Successfully assigned default/nginx to node</span><br><span class="line">  Normal  Pulling    4m3s   kubelet, node      Pulling image &quot;nginx&quot;</span><br><span class="line">  Normal  Pulled     3m50s  kubelet, node      Successfully pulled image &quot;nginx&quot;</span><br><span class="line">  Normal  Created    3m50s  kubelet, node      Created container nginx</span><br><span class="line">  Normal  Started    3m50s  kubelet, node      Started container nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod name -n namespace #删除pod，但是如果是命令行启动的话就会有pod控制器的话是会将这个pod删掉后又重新键一个pod的 必须删除pod控制器才行</span><br><span class="line">kubectl delete deploy name -n namespace  #删除pod控制器</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f filename.yaml #以yaml内配置信息创建一个pod</span><br><span class="line">kubectl delete -f filename.yuml #删除pod</span><br></pre></td></tr></table></figure><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><p>​label是kubernetes系统中的一个重要概念，它的作用是在资源上添加表示，用来对资源进行区分和选择</p><p>​label特点 ：所有资源上都可以添加标签</p><p>​ 可以通过Label实现资源的多维度分组，以便灵活，方便的进行资源分配，调度，配置，部署等管理工作</p><p>​标签也分为：版本标签( version )，环境标签( env )，架构标签( tier )……</p><h5 id="Label-Selector-标签选择器"><a href="#Label-Selector-标签选择器" class="headerlink" title="Label Selector 标签选择器"></a>Label Selector 标签选择器</h5><p>​基于等式的标签选择器</p><p>​基于集合的标签选择器</p><p>​可以使用多个标签选择器用 “，”隔开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n ddd --show-labels  #查看pod标签</span><br><span class="line">kubectl label pod nginx -n ddd version=1.1 #打标签</span><br><span class="line">kubectl label pod nginx -n ddd version=2.1 --overwrite #标签更新</span><br><span class="line">kubectl label pod nginx -n ddd run-#标签删除</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#  kubectl get pod -n ddd --show-labels</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx   1/1     Running   0          84s   run=nginx</span><br><span class="line">[root@master ~]#  kubectl label pod nginx -n ddd version=1.1</span><br><span class="line">pod/nginx labeled</span><br><span class="line">[root@master ~]#  kubectl get pod -n ddd --show-labels</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">nginx   1/1     Running   0          2m50s   run=nginx,version=1.1</span><br><span class="line">[root@master ~]#  kubectl label pod nginx -n ddd version=2.1 --overwrite</span><br><span class="line">pod/nginx labeled</span><br><span class="line">[root@master ~]#  kubectl get pod -n ddd --show-labels</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">nginx   1/1     Running   0          7m32s   run=nginx,version=2.1</span><br><span class="line">[root@master ~]#  kubectl label pod nginx -n ddd run-</span><br><span class="line">pod/nginx labeled</span><br><span class="line">[root@master ~]#  kubectl get pod -n ddd --show-labels</span><br><span class="line">NAME    READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">nginx   1/1     Running   0          10m   version=2.1</span><br></pre></td></tr></table></figure><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><p> pod控制器的一种，在k8s中Pod是最小控制单元，但是k8s很少直接控制pod一般都通过pod控制器来完成，pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障是，控制器会尝试重启或者重建pod</p><p>新版本副本构建 创建了pod控制器后要等它完全创建后再去生成副本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl create deployment nginx --image=nginx  -n ddd</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line">[root@master ~]# kubectl scale deployment nginx --replicas=3 -n ddd</span><br><span class="line">deployment.apps/nginx scaled</span><br><span class="line">[root@master ~]# kubectl get pod -n ddd</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-f89759699-ql5sc   1/1     Running   0          4m19s</span><br><span class="line">nginx-f89759699-vvs9v   1/1     Running   0          47s</span><br><span class="line">nginx-f89759699-z6m95   1/1     Running   0          47s</span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>​service可以看作是一组同类pod对外的访问接口，借助Service可以方便的实现服务发现和负载均衡</p><h5 id="集群内部访问："><a href="#集群内部访问：" class="headerlink" title="集群内部访问："></a>集群内部访问：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n ddd</span><br><span class="line">service/svc-nginx1 exposed</span><br><span class="line">[root@master ~]# kubectl get service -n ddd</span><br><span class="line">NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">svc-nginx1   ClusterIP   10.98.81.92   &lt;none&gt;        80/TCP    31s</span><br><span class="line">[root@master ~]# curl 10.98.81.92:80  #就可以访问Nginx服务了 稍微有点慢</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="集群外部访问："><a href="#集群外部访问：" class="headerlink" title="集群外部访问："></a>集群外部访问：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]#  kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n ddd</span><br><span class="line">service/svc-nginx2 exposed</span><br><span class="line">[root@master ~]# kubectl get svc -n ddd</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">svc-nginx1   ClusterIP   10.98.81.92     &lt;none&gt;        80/TCP         20m</span><br><span class="line">svc-nginx2   NodePort    10.104.142.33   &lt;none&gt;        80:30566/TCP   90s</span><br><span class="line">[root@master ~]# ip a | grep ens33</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    inet 192.168.16.90/24 brd 192.168.16.255 scope global noprefixroute dynamic ens33</span><br></pre></td></tr></table></figure><p>外部浏览器访问： <a href="http://192.168.16.90:30566/">http://192.168.16.90:30566/</a></p><h5 id="删除service"><a href="#删除service" class="headerlink" title="删除service"></a>删除service</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get svc -n ddd</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">svc-nginx1   ClusterIP   10.98.81.92     &lt;none&gt;        80/TCP         30m</span><br><span class="line">svc-nginx2   NodePort    10.104.142.33   &lt;none&gt;        80:30566/TCP   11m</span><br><span class="line">[root@master ~]# kubectl delete svc --all -n ddd</span><br><span class="line">service &quot;svc-nginx1&quot; deleted</span><br><span class="line">service &quot;svc-nginx2&quot; deleted</span><br><span class="line">[root@master ~]# kubectl get svc -n ddd</span><br><span class="line">No resources found in ddd namespace.</span><br></pre></td></tr></table></figure><hr><h3 id="kubernetes运维"><a href="#kubernetes运维" class="headerlink" title="kubernetes运维"></a>kubernetes运维</h3><h5 id="node节点的隔离与恢复："><a href="#node节点的隔离与恢复：" class="headerlink" title="node节点的隔离与恢复："></a>node节点的隔离与恢复：</h5><p>​在硬件升级、硬件维护等情况下，需要将某些Node隔离。使用kubectl cordon <node_name>命令可禁止Pod调度到该节点上，在其上运行的Pod并不会自动停止，管理员需要手动停止在该Node上运行的Pod。查看Node的状态，可以观察到在node的状态中增加了一项SchedulingDisabled，对于后续创建的Pod，系统将不会再向该Node进行调度。通过kubectl uncordon命令可完成对Node的恢复。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl cordon node</span><br><span class="line">node/node cordoned</span><br><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS                     ROLES    AGE   VERSION</span><br><span class="line">master   Ready                      master   40h   v1.18.1</span><br><span class="line">node     Ready,SchedulingDisabled   &lt;none&gt;   40h   v1.18.1</span><br><span class="line">[root@master ~]# kubectl uncordon node</span><br><span class="line">node/node uncordoned</span><br><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME     STATUS   ROLES    AGE   VERSION</span><br><span class="line">master   Ready    master   40h   v1.18.1</span><br><span class="line">node     Ready    &lt;none&gt;   40h   v1.18.1</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/af63b141c7af4ce293bac198f85cf566.png" alt="k8s节点隔离"></p><p>​可以看到Node节点已恢复调度，允许Pod调度到该节点上。<br>通过kubectl drain <node>命令可实现对node节点的驱逐，该命令会删除该节点上的所有Pod（DaemonSet除外），在其他Node上重新启动它们。</p><h5 id="Pod动态扩容和缩放："><a href="#Pod动态扩容和缩放：" class="headerlink" title="Pod动态扩容和缩放："></a>Pod动态扩容和缩放：</h5><p>​在实际生产系统中，经常会遇到某个服务需要扩容的场景，也可能会遇到由于资源紧张或者工作负载降低而需要减少服务实例数量的场景。此时可以利用kubectl scale deployment命令来完成这些任务。<br>以Nginx Deployment为例，已定义的最初副本数量为1。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl create deployment nginx --image=nginx </span><br><span class="line">deployment.apps/nginx created</span><br><span class="line">[root@master ~]# kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-f89759699-dj8nn   1/1     Running   0          26s</span><br><span class="line">[root@master ~]# kubectl scale deployment nginx --replicas=3 </span><br><span class="line">deployment.apps/nginx scaled</span><br><span class="line">[root@master ~]# kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-f89759699-8rz9h   1/1     Running   0          40s</span><br><span class="line">nginx-f89759699-dj8nn   1/1     Running   0          2m5s</span><br><span class="line">nginx-f89759699-fm74s   1/1     Running   0          40s</span><br><span class="line">[root@master ~]# kubectl scale deployment nginx --replicas=2</span><br><span class="line">deployment.apps/nginx scaled</span><br><span class="line">[root@master ~]# kubectl get pod</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-f89759699-8rz9h   1/1     Running   0          65s</span><br><span class="line">nginx-f89759699-dj8nn   1/1     Running   0          2m30s</span><br></pre></td></tr></table></figure><p>​将–replicas设置为比当前Pod副本数量更小的数字，系统将会“杀掉”一些运行中的Pod，即可实现应用集群缩容。</p><h5 id="将pod调度到指定的node节点"><a href="#将pod调度到指定的node节点" class="headerlink" title="将pod调度到指定的node节点"></a>将pod调度到指定的node节点</h5><p>​Kubernetes的Scheduler服务（kube-scheduler进程）负责实现Pod的调度，整个调度过程通过执行一系列复杂的算法最终为每个Pod计算出一个最佳的目标节点，这一过程是自动完成的，用户无法知道Pod最终会被调度到哪个节点上。有时可能需要将Pod调度到一个指定的Node上。此时，可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配，来达到上述目的。</p><p>Label（标签）作为用户可灵活定义的对象属性，在已创建的对象上，仍然可以随时通过kubectl label命令对其进行增加、修改、删除等操作。如果想删除Label，只需要在命令行最后指定Label的key名，并加一个减号即可。可以再打一个标签，实现增加。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl label nodes node project=gcxt</span><br><span class="line">node/node labeled</span><br><span class="line">[root@master ~]# kubectl get nodes node --show-labels</span><br><span class="line">NAME   STATUS   ROLES    AGE   VERSION   LABELS</span><br><span class="line">node   Ready    &lt;none&gt;   40h   v1.18.1   …… project=gcxt</span><br><span class="line">[root@master ~]# kubectl label node node project-</span><br><span class="line">node/node labeled</span><br><span class="line">[root@master ~]# kubectl get nodes node --show-labels</span><br><span class="line">NAME   STATUS   ROLES    AGE   VERSION   LABELS</span><br><span class="line">node   Ready    &lt;none&gt;   40h   v1.18.1   ……</span><br></pre></td></tr></table></figure><p>​在Pod创建的yaml中加入nodeSelector定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">……</span></span><br><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line"><span class="string">project:gcxt</span></span><br></pre></td></tr></table></figure><p>​再运行 kubectl create -f 命令创建Pod，scheduler就会将该Pod调度到拥有 project&#x3D;gcxt 标签的node节点上 ，kubectl get pods -owide查证<br>​可以看到，Pod已成功调度到指定的Node节点。<br>这种基于Label标签的调度方式灵活性很高，比如，可以把一组Node分别贴上“开发环境”、“测试环境”、“生产环境”这3组标签中的一种，此时一个Kubernetes集群就承载了3个环境，这将大大提高开发效率。<br>​<strong>注意：如果指定了Pod的nodeSelector条件，且集群中不存在包含相应标签的Node时，即使还有其他可供调度的Node，这个Pod也最终会调度失败。</strong></p><h5 id="应用滚动升级"><a href="#应用滚动升级" class="headerlink" title="应用滚动升级"></a>应用滚动升级</h5><p>​当集群中的某个服务需要升级时，需要停止目前与该服务相关的所有Pod，然后重新拉取镜像并启动。如果集群规模比较大，这个工作就变成了一个挑战。如果采取先全部停止，然后逐步升级的方式，会导致较长时间的服务不可用。Kubernetes提供了rolling-update（滚动升级）功能来解决上述问题。<br>滚动升级通过执行kubectl rolling-update命令一键完成，该命令创建了一个新的Deployment，然后自动控制旧的Deployment中的Pod副本数量逐渐减少到0，同时新的Deployment中的Pod副本数量从0逐步增加到目标值，最终实现了Pod的升级。<br><strong>注意：系统要求新的Deployment需要与旧的Deployment在相同的命名空间（Namespace）内，即不能把别人的资产偷偷转移到自家名下。</strong></p><h6 id="滚动升级过程："><a href="#滚动升级过程：" class="headerlink" title="滚动升级过程："></a>滚动升级过程：</h6><p>​① 启动一个新版Pod。<br>​② 把旧版Pod数量降为2。<br>​③ 再启动一个新版，数量变为2。<br>​④ 把旧版Pod数量降为1。<br>​⑤ 再启动一个新版，数量变为3。<br>​⑥ 把旧版Pod数量降为0。<br>​这就是滚动的意思，始终保持副本数量为3，控制新旧Pod的交替，实现了无缝升级。<br>​kubectl apply每次更新应用时，kubernetes都会记录下当前的配置，保存为一个revision，这样就可以回滚到某个特定的版本。</p><p>写一个配置文件 htppd.yaml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">template:</span> </span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">httpd:2.2.31</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>启动Deployment。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl create -f htppd.yaml </span></span><br><span class="line">deployment.apps/httpd created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment">#  kubectl get pods</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">httpd<span class="literal">-5f8664fc66-8wkj8</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">3</span>m6s</span><br><span class="line">httpd<span class="literal">-5f8664fc66-dtpvp</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">3</span>m6s</span><br><span class="line">httpd<span class="literal">-5f8664fc66-ll6z6</span>   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">3</span>m6s</span><br><span class="line"><span class="comment"># 查看deploy</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get deploy httpd -o wide</span></span><br><span class="line">NAME    READY   UP<span class="literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">httpd   <span class="number">3</span>/<span class="number">3</span>     <span class="number">3</span>            <span class="number">3</span>           <span class="number">41</span>m   httpd        httpd:<span class="number">2.2</span>.<span class="number">31</span>   run=httpd</span><br></pre></td></tr></table></figure><p>修改image为2.2.32</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">template:</span> </span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">httpd:2.2.32</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>再次查看deploy</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先更新</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f htppd.yaml </span></span><br><span class="line">deployment.apps/httpd configured</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl get deploy httpd -o wide</span></span><br><span class="line">NAME    READY   UP<span class="literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">httpd   <span class="number">3</span>/<span class="number">3</span>     <span class="number">3</span>            <span class="number">3</span>           <span class="number">51</span>m   httpd        httpd:<span class="number">2.2</span>.<span class="number">32</span>   run=httpd</span><br></pre></td></tr></table></figure><p>查看Deployment的详细信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl describe deploy httpd</span></span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  <span class="built_in">Type</span>    Reason             Age    From                   Message</span><br><span class="line">  <span class="literal">----</span>    <span class="literal">------</span>             <span class="literal">----</span>   <span class="literal">----</span>                   <span class="literal">-------</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">52</span>m    deployment<span class="literal">-controller</span>  Scaled up replica <span class="built_in">set</span> httpd<span class="literal">-5f8664fc66</span> to <span class="number">3</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">8</span>m     deployment<span class="literal">-controller</span>  Scaled up replica <span class="built_in">set</span> httpd<span class="literal">-6998bd9ff5</span> to <span class="number">1</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">7</span>m25s  deployment<span class="literal">-controller</span>  Scaled down replica <span class="built_in">set</span> httpd<span class="literal">-5f8664fc66</span> to <span class="number">2</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">7</span>m25s  deployment<span class="literal">-controller</span>  Scaled up replica <span class="built_in">set</span> httpd<span class="literal">-6998bd9ff5</span> to <span class="number">2</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">7</span>m24s  deployment<span class="literal">-controller</span>  Scaled down replica <span class="built_in">set</span> httpd<span class="literal">-5f8664fc66</span> to <span class="number">1</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">7</span>m24s  deployment<span class="literal">-controller</span>  Scaled up replica <span class="built_in">set</span> httpd<span class="literal">-6998bd9ff5</span> to <span class="number">3</span></span><br><span class="line">  Normal  ScalingReplicaSet  <span class="number">7</span>m23s  deployment<span class="literal">-controller</span>  Scaled down replica <span class="built_in">set</span> httpd<span class="literal">-5f8664fc66</span> to</span><br></pre></td></tr></table></figure><p>部署deploy</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f httpd1.yaml --record</span></span><br><span class="line">deployment.apps/httpd configured</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f httpd2.yaml --record</span></span><br><span class="line">deployment.apps/httpd configured</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl apply -f httpd3.yaml --record # --record的作用是将当前命令记录到revision中</span></span><br><span class="line">deployment.apps/httpd configured</span><br></pre></td></tr></table></figure><p>查看deploy</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl  get deploy httpd -o wide</span></span><br><span class="line">NAME    READY   UP<span class="literal">-TO-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">httpd   <span class="number">3</span>/<span class="number">3</span>     <span class="number">1</span>            <span class="number">3</span>           <span class="number">80</span>m   httpd        httpd:<span class="number">2.2</span>.<span class="number">18</span>   run=httpd</span><br></pre></td></tr></table></figure><p>查看revision记录</p><ul><li>status 显示当前升级状态</li><li>history 显示升级历史纪录</li><li>undo 回滚到上一级版本(可以使用–to-revision回滚到指定版本)</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl rollout history deploy httpd</span></span><br><span class="line">deployment.apps/httpd </span><br><span class="line">REVISION  CHANGE<span class="literal">-CAUSE</span></span><br><span class="line"><span class="number">1</span>         &lt;none&gt; <span class="comment">#这里的 1 2 为none 是因为上面两次升级回退时没有添加 --record ,所以没有记录</span></span><br><span class="line"><span class="number">2</span>         &lt;none&gt;</span><br><span class="line"><span class="number">3</span>         kubectl apply <span class="literal">--filename</span>=httpd1.yaml <span class="literal">--record</span>=true</span><br><span class="line"><span class="number">4</span>         kubectl apply <span class="literal">--filename</span>=httpd2.yaml <span class="literal">--record</span>=true</span><br><span class="line"><span class="number">5</span>         kubectl apply <span class="literal">--filename</span>=httpd3.yaml <span class="literal">--record</span>=true</span><br></pre></td></tr></table></figure><p>回滚到指定版本revision 1。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl rollout undo deploy httpd --to-revision=1</span></span><br><span class="line">deployment.apps/httpd rolled back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># kubectl  get deploy httpd -o wide</span></span><br><span class="line">NAME    READY   UP<span class="literal">-TO-DATE</span>   AVAILABLE   AGE    CONTAINERS   IMAGES         SELECTOR</span><br><span class="line">httpd   <span class="number">3</span>/<span class="number">3</span>     <span class="number">2</span>            <span class="number">3</span>           <span class="number">106</span>m   httpd        httpd:<span class="number">2.2</span>.<span class="number">31</span>   run=httpd</span><br></pre></td></tr></table></figure><h1 id="Pod容器"><a href="#Pod容器" class="headerlink" title="Pod容器"></a>Pod容器</h1><p>pod结构</p><p>每个pod中都可以包含一个或多个容器，这些容器可分为两类：</p><p>​用户程序所在的容器，数量可多可少</p><p>​pause容器，这是每个Pod都会有的一个根容器，它的作用有两个：</p><ol><li><p>可以以它为依据，评估整个Pod的健康状态</p></li><li><p>可以在根容器上设置ip地址，其他容器都共享根容器的ip，以实现Pod内部的网络通信</p></li></ol><p>pod资源清单(yaml)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod  #查询pod下的配置项</span><br><span class="line">kubectl explain pod.metadata #查询下面子配置</span><br></pre></td></tr></table></figure><h4 id="Pod容器端口"><a href="#Pod容器端口" class="headerlink" title="Pod容器端口"></a>Pod容器端口</h4><p><img src="https://img-blog.csdnimg.cn/d3b97fb2983e455d9938e1fa911ee5c4.png" alt="k8s pod端口"></p><p>每个pod都是有独立的ip 并不是像docker那样共享的主机ip</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack 学习笔记</title>
      <link href="/2021/11/12/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/12/OpenStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><hr><table><thead><tr><th align="center">项目</th><th align="left">服务</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">Horizon</td><td align="left">Dashboard</td><td align="left">提供图形化的web前端控制台，用于管理OpenStack的资源和服务。</td></tr><tr><td align="center">Nova</td><td align="left">Compute</td><td align="left">核心组件之一，负责云计算环境中虚拟机的管理。</td></tr><tr><td align="center">Neutron</td><td align="left">Networking</td><td align="left">核心组件之一，提供云计算下的虚拟网络功能，实现了“网络即服务”的功能。</td></tr><tr><td align="center">Swift</td><td align="left">Object Storage</td><td align="left">在大规模可扩展系统中通过内置冗余及高容错机制实现对象存储的系统，允许进行存储或者检索文件。</td></tr><tr><td align="center">Cinder</td><td align="left">Block Storage</td><td align="left">提供块设备的创建，添加和卸载，并没有实现对块设备的管理和实际服务，而是为后端不同的存储结构提供了统一的接口。</td></tr><tr><td align="center">Keystone</td><td align="left">ldentity service</td><td align="left">为整个的OpenStack提供了用户信息管理和安全认证的服务。</td></tr><tr><td align="center">Glance</td><td align="left">Image service</td><td align="left">提供了虚拟机磁盘镜像的查询，注册和传输的服务。</td></tr><tr><td align="center">Ceilometer</td><td align="left">Telemetry</td><td align="left">监控组件，收集监控数据，可以为计费和监控以及其它服务提供数据支撑。</td></tr><tr><td align="center">Hear</td><td align="left">Orchestration</td><td align="left">部署编排服务，通过模板定义和描述云环境的架构，并且以自动化的方式进行部署云计算资源。</td></tr><tr><td align="center">Trove</td><td align="left">Database service</td><td align="left">提供了数据库即服务的功能，支持关系型数据库和非关系型数据库。</td></tr><tr><td align="center">Sahara</td><td align="left">Data processing service</td><td align="left">在OpenStack中提供了Hadoop集群创建的创建和管理功能。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>name<span class="tag">&lt;/<span class="name">summary</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span>   `</span><br></pre></td></tr></table></figure><p>​    </p><p>OpenStack</p><p>OpenStack数据库内信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| aodh               |</span><br><span class="line">| cinder             |</span><br><span class="line">| glance             |</span><br><span class="line">| gnocchi            |</span><br><span class="line">| heat               |</span><br><span class="line">| information_schema |</span><br><span class="line">| keystone           |</span><br><span class="line">| mysql              |</span><br><span class="line">| neutron            |  </span><br><span class="line">| nova               |</span><br><span class="line">| nova_api           |</span><br><span class="line">| nova_cell0         |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">13 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>先电 iaas OpenStack安装脚本在 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/local/bin</span><br></pre></td></tr></table></figure><p>过滤配置文件内的 <code>#</code> 号 <code>空格</code>  ↓</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename |  grep -v &#x27;^#&#x27; | grep -v &#x27;^$&#x27; &gt; newfile</span><br></pre></td></tr></table></figure><p>环境变量配置文件： ↓</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ]# cat /etc/keystone/admin-openrc.sh</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME=demo</span><br><span class="line">export OS_USER_DOMAIN_NAME=demo</span><br><span class="line">export OS_PROJECT_NAME=admin</span><br><span class="line">export OS_USERNAME=admin</span><br><span class="line">export OS_PASSWORD=000000</span><br><span class="line">export OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line">export OS_IDENTITY_API_VERSION=3</span><br><span class="line">export OS_IMAGE_API_VERSION=2</span><br><span class="line">export OS_AUTH_TYPE=password</span><br></pre></td></tr></table></figure><h5 id="KeyStone为整个OpenStack提供认证服务"><a href="#KeyStone为整个OpenStack提供认证服务" class="headerlink" title="KeyStone为整个OpenStack提供认证服务"></a>KeyStone为整个OpenStack提供认证服务</h5><p>先电OpenStack KeyStone安装脚本 ：↓</p><details>     <summary>cat iaas-install-keystone.sh</summary>     <pre>        <code>#!/bin/bashsource /etc/xiandian/openrc.sh#keystone mysqlmysql -uroot -p$DB_PASS -e "create database IF NOT EXISTS keystone ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '$KEYSTONE_DBPASS' ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '$KEYSTONE_DBPASS' ;"#install keystoneyum install openstack-keystone httpd mod_wsgi -y#/etc/keystone/keystone.confcrudini --set /etc/keystone/keystone.conf database connection  mysql+pymysql://keystone:$KEYSTONE_DBPASS@$HOST_NAME/keystonecrudini --set /etc/keystone/keystone.conf token provider  fernetADMIN_TOKEN=$(openssl rand -hex 10)crudini --set /etc/keystone/keystone.conf DEFAULT admin_token $ADMIN_TOKENsu -s /bin/sh -c "keystone-manage db_sync" keystonekeystone-manage fernet_setup --keystone-user keystone --keystone-group keystonekeystone-manage credential_setup --keystone-user keystone --keystone-group keystonesed -i "s/#ServerName www.example.com:80/ServerName $HOST_NAME/g" /etc/httpd/conf/httpd.confln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/systemctl enable httpd.servicesystemctl restart httpd.serviceexport OS_TOKEN=$ADMIN_TOKENexport OS_URL=http://$HOST_NAME:35357/v3export OS_IDENTITY_API_VERSION=3openstack service create --name keystone --description "OpenStack Identity" identityopenstack endpoint create --region RegionOne identity public http://$HOST_NAME:5000/v3openstack endpoint create --region RegionOne identity internal http://$HOST_NAME:5000/v3openstack endpoint create --region RegionOne identity admin http://$HOST_NAME:35357/v3openstack domain create --description "Default Domain" $DOMAIN_NAMEopenstack project create --domain $DOMAIN_NAME --description "Admin Project" admin # 创建管理项目openstack user create --domain $DOMAIN_NAME --password $ADMIN_PASS admin # 创建管理用户openstack role create admin #创建管理角色openstack role add --project admin --user admin admin # 为管理项目和管理用户添加管理角色openstack project create --domain $DOMAIN_NAME --description "Service Project" service #创建服务项目openstack project create --domain $DOMAIN_NAME --description "Demo Project" demo #创建demo项目openstack user create --domain $DOMAIN_NAME --password $DEMO_PASS demo #创建demo用户openstack role create user #创建user角色openstack role add --project demo --user demo user # 给demo项目和用户添加角色unset OS_TOKEN OS_URL # 环境变量# 为admin用户写个脚本↓cat > /etc/keystone/admin-openrc.sh <<-EOF export OS_PROJECT_DOMAIN_NAME=$DOMAIN_NAMEexport OS_USER_DOMAIN_NAME=$DOMAIN_NAMEexport OS_PROJECT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=$ADMIN_PASSexport OS_AUTH_URL=http://$HOST_NAME:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOF# 为demo用户创建脚本↓cat > /etc/keystone/demo-openrc.sh <<-EOFexport OS_PROJECT_DOMAIN_NAME=$DOMAIN_NAMEexport OS_USER_DOMAIN_NAME=$DOMAIN_NAMEexport OS_PROJECT_NAME=demoexport OS_USERNAME=demoexport OS_PASSWORD=$DEMO_PASSexport OS_AUTH_URL=http://$HOST_NAME:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOFsource /etc/keystone/admin-openrc.sh #加载脚本openstack token issue#测试脚本        </code>    </pre></details>    <h5 id="Glance镜像服务"><a href="#Glance镜像服务" class="headerlink" title="Glance镜像服务"></a>Glance镜像服务</h5><p>​Glance是一个专门的来负责虚拟机镜像管理的模块。提供了虚拟镜像的查询，注册和传输的服务。支持多种镜像的存储机制：简单文件系统，Swift服务存储镜像机制。</p><p>Glance有两个服务模块</p><ol><li><p>Glance-API:  (glance-api.conf)</p><p>主要负责接受响应 镜像 管理命令的Restful请求，分析消息请求信息并分发其所带的命令（增删查更新等等）</p></li><li><p>Glance-Registry：(glance–registry.conf)</p><p>主要负责接受响应 ‘镜像元数据‘ 命令的 Restful 请求。分析消息请求信息并分发其所带的命令(如获取元数据，更新元数据等)，进行数据库相关的增删改查工作。</p></li></ol><p>支持的虚拟磁盘镜像 Raw ，qcow2 ，AMI&#x2F;AKI&#x2F;ARI ，OVF   ……<br>​qcow2 具体加密，压缩，以及快照等raw格式不具有的功能，磁盘用多少就占多少，raw是划分多少就是多少</p><p>先电OpenStack Glance上传安装脚本：↓</p><details>     <summary>cat iaas-install-glance.sh</summary>     <pre>        <code>#!/bin/bashsource  /etc/xiandian/openrc.shsource  /etc/keystone/admin-openrc.sh#glance mysqlmysql -uroot -p$DB_PASS -e "create database IF NOT EXISTS glance ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY '$GLANCE_DBPASS' ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY '$GLANCE_DBPASS' ;"#glance user role service endpointopenstack user create --domain $DOMAIN_NAME --password $GLANCE_PASS glanceopenstack role add --project service --user glance admin   # 添加admin角色到service项目内openstack service create --name glance --description "OpenStack Image" image  # 创建服务实体openstack endpoint create --region RegionOne image public http://$HOST_NAME:9292 # 创建服务的APIopenstack endpoint create --region RegionOne image internal http://$HOST_NAME:9292openstack endpoint create --region RegionOne image admin http://$HOST_NAME:9292#glance installyum install -y openstack-glance#/etc/glance/glance-api.confcrudini --set /etc/glance/glance-api.conf database connection  mysql+pymysql://glance:$GLANCE_DBPASS@$HOST_NAME/glancecrudini --set /etc/glance/glance-api.conf keystone_authtoken auth_uri http://$HOST_NAME:5000crudini --set /etc/glance/glance-api.conf keystone_authtoken auth_url http://$HOST_NAME:5000crudini --set /etc/glance/glance-api.conf keystone_authtoken memcached_servers  $HOST_NAME:11211crudini --set /etc/glance/glance-api.conf keystone_authtoken auth_type passwordcrudini --set /etc/glance/glance-api.conf keystone_authtoken project_domain_name $DOMAIN_NAMEcrudini --set /etc/glance/glance-api.conf keystone_authtoken user_domain_name $DOMAIN_NAMEcrudini --set /etc/glance/glance-api.conf keystone_authtoken project_name servicecrudini --set /etc/glance/glance-api.conf keystone_authtoken username glancecrudini --set /etc/glance/glance-api.conf keystone_authtoken password $GLANCE_PASScrudini --set /etc/glance/glance-api.conf paste_deploy flavor keystonecrudini --set /etc/glance/glance-api.conf glance_store stores file,httpcrudini --set /etc/glance/glance-api.conf glance_store default_store  filecrudini --set /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/ # 镜像存储的路径#/etc/glance/glance-registry.confcrudini --set /etc/glance/glance-registry.conf database connection  mysql+pymysql://glance:$GLANCE_DBPASS@$HOST_NAME/glancecrudini --set /etc/glance/glance-registry.conf keystone_authtoken auth_uri http://$HOST_NAME:5000crudini --set /etc/glance/glance-registry.conf keystone_authtoken auth_url http://$HOST_NAME:5000crudini --set /etc/glance/glance-registry.conf keystone_authtoken memcached_servers $HOST_NAME:11211crudini --set /etc/glance/glance-registry.conf keystone_authtoken auth_type passwordcrudini --set /etc/glance/glance-registry.conf keystone_authtoken project_domain_name $DOMAIN_NAMEcrudini --set /etc/glance/glance-registry.conf keystone_authtoken user_domain_name $DOMAIN_NAMEcrudini --set /etc/glance/glance-registry.conf keystone_authtoken project_name servicecrudini --set /etc/glance/glance-registry.conf keystone_authtoken username glancecrudini --set /etc/glance/glance-registry.conf keystone_authtoken password $GLANCE_PASScrudini --set /etc/glance/glance-registry.conf paste_deploy flavor keystone#su glance mysqlsu -s /bin/sh -c "glance-manage db_sync" glance # 为镜像服务数据库添加数据#start glance service # 设置开机自启 启动两个服务 systemctl enable openstack-glance-api.service openstack-glance-registry.servicesystemctl start openstack-glance-api.service openstack-glance-registry.service        </code>    </pre></details>    <p>本地生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">glance image-create --name &quot;CentOS7.5&quot; --disk-format qcow2 --container-format bare --progress &lt; /opt/iaas/images/CentOS_7.5_x86_64_XD.qcow2</span><br><span class="line"></span><br><span class="line">glance image-create # 创建镜像</span><br><span class="line">           --name   # 镜像名字</span><br><span class="line">           --disk-format # 磁盘格式</span><br><span class="line">           --container-format # 容器格式</span><br><span class="line">           --progress  # 进度条</span><br><span class="line">           </span><br><span class="line">[root@controller ~]# openstack help image create  # 查询使用openstack创建镜像命令相关参数</span><br><span class="line">[root@controller ~]# openstack image create  test  --disk-format qcow2 --container-format bare &lt; cirros-0.3.4-x86_64-disk.img</span><br><span class="line">[root@controller ~]# openstack image list             # 查看所有镜像</span><br></pre></td></tr></table></figure><p>记不住参数可以用 <code> help</code> 查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# glance --help |grep image     # 查询镜像方面相关命令</span><br><span class="line">[root@controller ~]# glance help image-create      # 查询镜像创建相关参数</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/2f42eda03b394a0eb571af4a4ac069c1.png" alt="glance --help"></p><p>glance镜像查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# glance image-list</span><br><span class="line">You must provide a username via either --os-username or env[OS_USERNAME] </span><br><span class="line">[root@controller ~]# source /etc/keystone/admin-openrc.sh  # 加载用户身份变量</span><br><span class="line">[root@controller ~]# glance image-list</span><br><span class="line">+--------------------------------------+-----------+</span><br><span class="line">| ID                                   | Name      |</span><br><span class="line">+--------------------------------------+-----------+</span><br><span class="line">| 72cd066e-ee2e-4b9a-8c83-f811a97a79b4 | CentOS7.5 |</span><br><span class="line">+--------------------------------------+-----------+</span><br></pre></td></tr></table></figure><p>修改镜像名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@controller images]# openstack image list        # OpenStack命令查看镜像</span><br><span class="line">[root@controller images]# glance image-list           # glance命令查看镜像</span><br><span class="line">[root@controller images]# openstack help image        # 查看镜像相关操作命令</span><br><span class="line">[root@controller images]# openstack help image set  # 查看镜像修改相关参数</span><br></pre></td></tr></table></figure><p>镜像tag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@controller images]# openstack image show a2282ef2-eea9-420a-b216-95fc7eee1344 | grep tag   # 查看镜像tag</span><br><span class="line">| tags             |                                                      |</span><br><span class="line">[root@controller images]# openstack image set --tag lastone a2282ef2-eea9-420a-b216-95fc7eee1344 # 修改镜像tag</span><br><span class="line">[root@controller images]# openstack image show a2282ef2-eea9-420a-b216-95fc7eee1344 | grep tag   # 查看镜像tag</span><br><span class="line">| tags             | lastone                                              |</span><br></pre></td></tr></table></figure><h5 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h5><p>​<a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=40&spm_id_from=pageDriver">Nova简介</a> <a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=41&spm_id_from=pageDriver">Nova安装</a> <a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=42">控制节点安装配置Nova</a><a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=43">计算节点安装配置Nova</a></p><p>​nova是OpenStack中的计算模块，是三大核心组件中最重要的一个模块，负责云计算环境中虚拟机的管理，Python语言开发</p><p>​ 在nova内部，有许多小型组件为nova内部进程提供各种服务：1. 虚拟机管理 2. 虚拟机VNC和日志的管理 3. 数据库管理  4. 安全管理</p><p>​<a href="https://baike.baidu.com/item/VNC/2906305?fr=aladdin">NVC</a>(Virtual Network Console) : 是虚拟网络计算机的缩写，用于实现主机的远程控制，控制能力强大，高效实用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# nova service-list</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0634ea3be1064adb82d7deb80a7bfb55.png" alt="nova service-list"></p><p>nova创建云主机类型</p><p> <img src="https://img-blog.csdnimg.cn/196363ecda4547de8b094ff0eb6e99ca.png" alt="nova create创建"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# nova --help | grep create    # 查看nova创建相关命令</span><br><span class="line">[root@controller ~]# nova help flavor-create      # 查看创建云主机类型所需参数</span><br></pre></td></tr></table></figure><p>尝试创建一个云主机类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# nova help flavor-create</span><br><span class="line">usage: nova flavor-create [--ephemeral &lt;ephemeral&gt;] [--swap &lt;swap&gt;]</span><br><span class="line">                          [--rxtx-factor &lt;factor&gt;] [--is-public &lt;is-public&gt;]</span><br><span class="line">                          [--description &lt;description&gt;]</span><br><span class="line">                          &lt;name&gt; &lt;id&gt; &lt;ram&gt; &lt;disk&gt; &lt;vcpus&gt;</span><br><span class="line"></span><br><span class="line">Create a new flavor.</span><br><span class="line"></span><br><span class="line">Positional arguments:</span><br><span class="line">  &lt;name&gt;                       Unique name of the new flavor.</span><br><span class="line">  &lt;id&gt;                         Unique ID of the new flavor. Specifying &#x27;auto&#x27;</span><br><span class="line">                               will generated a UUID for the ID.</span><br><span class="line">  &lt;ram&gt;                        Memory size in MB.</span><br><span class="line">  &lt;disk&gt;                       Disk size in GB.</span><br><span class="line">  &lt;vcpus&gt;                      Number of vcpus</span><br><span class="line">[root@controller ~]# nova flavor-create test1 auto 1024 20 1  # 创建云主机类型 名字 id 内存 磁盘 cpu核心数</span><br><span class="line">[root@controller ~]# nova flavor-list # 查看所有类型</span><br><span class="line"></span><br><span class="line">openstack 命令 ↓</span><br><span class="line">[root@controller ~]# openstack flavor create Fmin --id 1 --ram 1024 --disk 10 --vcpus 1 # openstack命令创建云主机类型</span><br><span class="line">[root@controller ~]# openstack flavor list # 查看所有云主机类型</span><br></pre></td></tr></table></figure><p>创建云主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nova相关命令创建</span><br><span class="line">[root@controller ~]# nova help boot # 查看boot参数</span><br><span class="line">[root@controller ~]# nova boot name --flavor id/name --image id/name --nic net-id=id/name  # 创建云主机</span><br><span class="line">    new云主机name    云主机类型         云主机镜像            云主机网络</span><br><span class="line">[root@controller ~]# nova list # 查看所有云主机</span><br><span class="line"></span><br><span class="line">openstack相关命令创建</span><br><span class="line">[root@controller ~]# openstack help server create # 查看创建相关参数</span><br><span class="line">[root@controller ~]# openstack server create name --flavor id/name --image id/name --nic net-id=id #创建云主机</span><br><span class="line">   云主机name     云主机类型         云主机镜像          云主机网络</span><br><span class="line">[root@controller ~]# openstack server list # 查看所有云主机</span><br></pre></td></tr></table></figure><h5 id="Neutron-网络"><a href="#Neutron-网络" class="headerlink" title="Neutron 网络"></a>Neutron 网络</h5><p>​<a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=52">Neutron简介</a> <a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=53">Neutron安装</a><a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=54">控制节点安装Neutron</a><a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=55">网络节点安装Neutron</a> <a href="">计算节点安装Neutron</a></p><p>​Openstack的设计理念是把所有的组件当做服务来注册的, Neutron作为OpenStack的核心项目之一,提供云计算环境下的虚拟网络功能,实现了“网络即服务”的功能。Neutron将网络、子网、端口和路由器抽象化,之后启动的虚拟主机就可以连接到这个虚拟网络上。</p><p>​nova-network 主要功能有</p><ul><li><p>IP地址分配  </p><p>​为虚拟机分配私有(固定) 和 浮动IP地址</p></li><li><p>网络模型与管理</p><p>​提供了<code>虚拟网络</code>似虚拟主机之间以及与外部网络通信。网络模型分为三种(扁平化，带DHCP功能的扁平网络，VLAN网络)，三种模型可以共存在一个云系统中，但是在一个计算节点上只能配备一种模型。</p><p>​扁平网络( Flat Network)在创建虚拟主机时,nova- network会从指定子网中取一个空闲IP并将它写入此虚拟主机的配置文件。</p><p>​带DHCP功能的扁平网络( Flat DHCP Network)顾名思义,此种模式相对于扁平网络加入了DHCP功能。</p><p>​VLAN网络( VLAN Network)这是nova- network的默认模型。针对每个项目( Project,如今 Openstack把项目改称租户- Tenant),都会对应一个van。每个项目里的私有P地址只能在本项目的van里访问。</p></li><li><p>安全控制</p><p>主要通过ebtables和iptables来实现</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# neutron --help</span><br></pre></td></tr></table></figure><p>先电OpenStack Neutron脚本： ↓</p><details>     <summary> cat iaas-install-neutron-controller.sh </summary>     <pre>        <code>#!/bin/bashsource /etc/xiandian/openrc.shsource /etc/keystone/admin-openrc.sh#neutron mysqlmysql -uroot -p$DB_PASS -e "create database IF NOT EXISTS neutron ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '$NEUTRON_DBPASS' ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '$NEUTRON_DBPASS' ;"#neutron  user role service endpointopenstack user create --domain $DOMAIN_NAME --password $NEUTRON_PASS neutronopenstack role add --project service --user neutron adminopenstack service create --name neutron --description "OpenStack Networking" networkopenstack endpoint create --region RegionOne network public http://$HOST_NAME:9696openstack endpoint create --region RegionOne  network internal http://$HOST_NAME:9696openstack endpoint create --region RegionOne  network admin http://$HOST_NAME:9696#neutron installyum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables -yif [[ `ip a |grep -w $INTERFACE_IP |grep -w $INTERFACE_NAME` = '' ]];thencat > /etc/sysconfig/network-scripts/ifcfg-$INTERFACE_NAME <<EOFDEVICE=$INTERFACE_NAMETYPE=EthernetBOOTPROTO=noneONBOOT=yesEOFsystemctl restart networkfi#/etc/neutron/neutron.confcrudini --set /etc/neutron/neutron.conf DEFAULT core_plugin  ml2crudini --set /etc/neutron/neutron.conf DEFAULT service_plugins  routercrudini --set /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips  truecrudini --set /etc/neutron/neutron.conf DEFAULT transport_url  rabbit://openstack:$NEUTRON_DBPASS@$HOST_NAMEcrudini --set /etc/neutron/neutron.conf DEFAULT auth_strategy  keystonecrudini --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes  truecrudini --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes  truecrudini --set /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:$NEUTRON_DBPASS@$HOST_NAME/neutroncrudini --set /etc/neutron/neutron.conf keystone_authtoken auth_uri  http://$HOST_NAME:5000crudini --set /etc/neutron/neutron.conf keystone_authtoken auth_url  http://$HOST_NAME:35357crudini --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers  $HOST_NAME:11211crudini --set /etc/neutron/neutron.conf keystone_authtoken auth_type  passwordcrudini --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf keystone_authtoken project_name  servicecrudini --set /etc/neutron/neutron.conf keystone_authtoken username  neutroncrudini --set /etc/neutron/neutron.conf keystone_authtoken password  $NEUTRON_PASScrudini --set /etc/neutron/neutron.conf nova auth_url  http://$HOST_NAME:35357crudini --set /etc/neutron/neutron.conf nova auth_type  passwordcrudini --set /etc/neutron/neutron.conf nova project_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf nova user_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf nova region_name  RegionOnecrudini --set /etc/neutron/neutron.conf nova project_name  servicecrudini --set /etc/neutron/neutron.conf nova username  novacrudini --set /etc/neutron/neutron.conf nova password  $NOVA_PASScrudini --set /etc/neutron/neutron.conf oslo_concurrency lock_path  /var/lib/neutron/tmp#/etc/neutron/plugins/ml2/ml2_conf.inicrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers  flat,vlan,vxlancrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types  vxlancrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers  linuxbridge,l2populationcrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers  port_securitycrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks  $Physical_NAMEcrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vlan network_vlan_ranges $Physical_NAME:$minvlan:$maxvlancrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges  $minvlan:$maxvlancrudini --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset  true#/etc/neutron/plugins/ml2/linuxbridge_agent.inicrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings  $Physical_NAME:$INTERFACE_NAMEcrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip  $INTERFACE_IPcrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver  neutron.agent.linux.iptables_firewall.IptablesFirewallDriver#/etc/neutron/l3_agent.inicrudini --set /etc/neutron/l3_agent.ini DEFAULT interface_driver  linuxbridge#/etc/neutron/dhcp_agent.inicrudini --set /etc/neutron/dhcp_agent.ini DEFAULT interface_driver  linuxbridgecrudini --set /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver  neutron.agent.linux.dhcp.Dnsmasqcrudini --set /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata  true#/etc/neutron/metadata_agent.inicrudini --set /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_host  $HOST_NAMEcrudini --set /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret  $METADATA_SECRET#/etc/nova/nova.confcrudini --set /etc/nova/nova.conf neutron url  http://$HOST_NAME:9696crudini --set /etc/nova/nova.conf neutron auth_url  http://$HOST_NAME:35357crudini --set /etc/nova/nova.conf neutron auth_type  passwordcrudini --set /etc/nova/nova.conf neutron project_domain_name  $DOMAIN_NAMEcrudini --set /etc/nova/nova.conf neutron user_domain_name  $DOMAIN_NAMEcrudini --set /etc/nova/nova.conf neutron region_name  RegionOnecrudini --set /etc/nova/nova.conf neutron project_name  servicecrudini --set /etc/nova/nova.conf neutron username  neutroncrudini --set /etc/nova/nova.conf neutron password  $NEUTRON_PASScrudini --set /etc/nova/nova.conf neutron service_metadata_proxy  truecrudini --set /etc/nova/nova.conf neutron metadata_proxy_shared_secret  $METADATA_SECRET# ln -s 软连接  su -s 加载配置文件ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.inisu -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutronsystemctl restart openstack-nova-api.service# 设置开机自启 启动服务 ↓systemctl enable neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.servicesystemctl start neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service        </code>    </pre></details><details>     <summary>cat iaas-install-neutron-compute.sh</summary>     <pre>        <code>#!/bin/bashsource /etc/xiandian/openrc.sh#neutron installyum install openstack-neutron-linuxbridge ebtables ipset net-tools -yif [[ `ip a |grep -w $INTERFACE_IP |grep -w $INTERFACE_NAME` = '' ]];thencat > /etc/sysconfig/network-scripts/ifcfg-$INTERFACE_NAME <<EOFDEVICE=$INTERFACE_NAMETYPE=EthernetBOOTPROTO=noneONBOOT=yesEOFsystemctl restart networkfi#/etc/neutron/neutron.confcrudini --set /etc/neutron/neutron.conf DEFAULT transport_url  rabbit://openstack:$NEUTRON_DBPASS@$HOST_NAMEcrudini --set /etc/neutron/neutron.conf DEFAULT auth_strategy  keystonecrudini --set /etc/neutron/neutron.conf keystone_authtoken auth_uri  http://$HOST_NAME:5000crudini --set /etc/neutron/neutron.conf keystone_authtoken auth_url  http://$HOST_NAME:35357crudini --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers  $HOST_NAME:11211crudini --set /etc/neutron/neutron.conf keystone_authtoken auth_type  passwordcrudini --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name  $DOMAIN_NAMEcrudini --set /etc/neutron/neutron.conf keystone_authtoken project_name  servicecrudini --set /etc/neutron/neutron.conf keystone_authtoken username  neutroncrudini --set /etc/neutron/neutron.conf keystone_authtoken password  $NEUTRON_PASScrudini --set /etc/neutron/neutron.conf oslo_concurrency lock_path  /var/lib/neutron/tmp#/etc/neutron/plugins/ml2/linuxbridge_agent.inicrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings  provider:$INTERFACE_NAMEcrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip $INTERFACE_IPcrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group  truecrudini --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver  neutron.agent.linux.iptables_firewall.IptablesFirewallDriver#/etc/nova/nova.confcrudini --set /etc/nova/nova.conf neutron url  http://$HOST_NAME:9696crudini --set /etc/nova/nova.conf neutron auth_url  http://$HOST_NAME:35357crudini --set /etc/nova/nova.conf neutron auth_type  passwordcrudini --set /etc/nova/nova.conf neutron project_domain_name  $DOMAIN_NAMEcrudini --set /etc/nova/nova.conf neutron user_domain_name  $DOMAIN_NAMEcrudini --set /etc/nova/nova.conf neutron region_name  RegionOnecrudini --set /etc/nova/nova.conf neutron project_name  servicecrudini --set /etc/nova/nova.conf neutron username  neutroncrudini --set /etc/nova/nova.conf neutron password  $NEUTRON_PASS# 重启 openstack-nova-compute.service服务 启动并设置开机自启neutron-linuxbridge-agent.servicesystemctl restart openstack-nova-compute.servicesystemctl start neutron-linuxbridge-agent.servicesystemctl enable neutron-linuxbridge-agent.service            </code>    </pre></details>网络创建<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack network create 1111  --provider-network-type flat --provider-physical-network provider --external        # 创建网络</span><br><span class="line">[root@controller ~]# openstack network list  # 查看网络</span><br><span class="line">[root@controller ~]# openstack network delete ID # 删除网络</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2a964933feb6494a8ceba839481bf75d.png" alt="OpenStack Neutron create "></p><h5 id="Cinder块存储服务"><a href="#Cinder块存储服务" class="headerlink" title="Cinder块存储服务"></a>Cinder块存储服务</h5><p>​<a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=64">Cinder简介</a></p><p>​API service : 负责接受和处理Rest请求,并将请求放入 RabbitMQ队。<br>​Scheduler service : 处理任务队列的任务,并根据预定策略选择合适的 VolumeService节点来执行任务。<br>​Volume service : 该服务运行在存储节点上,管理存储空间。每个存储节点都有一个 Volume service,若干个这样的存储节点联合起来可以构成一个存储资源。</p><p>先电OpenStack Cinder安装脚本 ↓</p><details>     <summary>cat iaas-install-cinder-controller.sh</summary>     <pre>        <code>#!/bin/bashyum install openstack-cinder -ysource /etc/xiandian/openrc.shsource /etc/keystone/admin-openrc.shmysql -uroot -p$DB_PASS -e "create database IF NOT EXISTS cinder ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY '$CINDER_DBPASS' ;"mysql -uroot -p$DB_PASS -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY '$CINDER_DBPASS' ;"openstack user create --domain $DOMAIN_NAME --password $CINDER_PASS cinderopenstack role add --project service --user cinder adminopenstack service create --name cinder  --description "OpenStack Block Store" volumeopenstack service create --name cinderv2  --description "OpenStack Block Store" volumev2openstack service create --name cinderv3  --description "OpenStack Block Store" volumev3openstack endpoint create --region RegionOne volume public http://$HOST_NAME:8776/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne volume internal http://$HOST_NAME:8776/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne volume admin http://$HOST_NAME:8776/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev2 public http://$HOST_NAME:8776/v2/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev2 internal http://$HOST_NAME:8776/v2/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev2 admin http://$HOST_NAME:8776/v2/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev3 public http://$HOST_NAME:8776/v3/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev3 internal http://$HOST_NAME:8776/v3/%\(tenant_id\)sopenstack endpoint create --region RegionOne volumev3 admin http://$HOST_NAME:8776/v3/%\(tenant_id\)scrudini --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:$CINDER_DBPASS@$HOST_NAME/cindercrudini --set /etc/cinder/cinder.conf DEFAULT rpc_backend rabbitcrudini --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_host $HOST_NAMEcrudini --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_userid $RABBIT_USERcrudini --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_password  $RABBIT_PASScrudini --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystonecrudini --set /etc/cinder/cinder.conf keystone_authtoken auth_uri  http://$HOST_NAME:5000crudini --set /etc/cinder/cinder.conf keystone_authtoken auth_url  http://$HOST_NAME:35357crudini --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers  $HOST_NAME:11211crudini --set /etc/cinder/cinder.conf keystone_authtoken auth_type  passwordcrudini --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name  $DOMAIN_NAMEcrudini --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name $DOMAIN_NAMEcrudini --set /etc/cinder/cinder.conf keystone_authtoken project_name  servicecrudini --set /etc/cinder/cinder.conf keystone_authtoken username  cindercrudini --set /etc/cinder/cinder.conf keystone_authtoken password  $CINDER_PASScrudini --set /etc/cinder/cinder.conf DEFAULT my_ip $HOST_IPcrudini --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmpsu -s /bin/sh -c "cinder-manage db sync" cindercrudini --set /etc/nova/nova.conf cinder os_region_name  RegionOne# 重启 并设置开机自启服务 ↓systemctl restart openstack-nova-api.servicesystemctl enable openstack-cinder-api.service openstack-cinder-scheduler.service            </code>    </pre></details><details>     <summary>cat iaas-install-cinder-compute.sh</summary>     <pre>        <code>#!/bin/bashsource /etc/xiandian/openrc.shyum install lvm2 device-mapper-persistent-data openstack-cinder targetcli python-keystone -ysystemctl enable lvm2-lvmetad.servicesystemctl restart lvm2-lvmetad.servicepvcreate -f /dev/$BLOCK_DISKvgcreate cinder-volumes /dev/$BLOCK_DISKcrudini --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:$CINDER_DBPASS@$HOST_NAME/cindercrudini --set /etc/cinder/cinder.conf DEFAULT transport_url rabbit://$RABBIT_USER:$RABBIT_PASS@$HOST_NAMEcrudini --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystonecrudini --set /etc/cinder/cinder.conf DEFAULT enabled_backends  lvmcrudini --set /etc/cinder/cinder.conf keystone_authtoken auth_uri  http://$HOST_NAME:5000crudini --set /etc/cinder/cinder.conf keystone_authtoken auth_url  http://$HOST_NAME:35357crudini --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers  $HOST_NAME:11211crudini --set /etc/cinder/cinder.conf keystone_authtoken auth_type  passwordcrudini --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name  $DOMAIN_NAMEcrudini --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name $DOMAIN_NAMEcrudini --set /etc/cinder/cinder.conf keystone_authtoken project_name  servicecrudini --set /etc/cinder/cinder.conf keystone_authtoken username  cindercrudini --set /etc/cinder/cinder.conf keystone_authtoken password  $CINDER_PASScrudini --set /etc/cinder/cinder.conf DEFAULT my_ip $HOST_IP_NODEcrudini --set /etc/cinder/cinder.conf lvm volume_driver cinder.volume.drivers.lvm.LVMVolumeDrivercrudini --set /etc/cinder/cinder.conf lvm volume_group cinder-volumescrudini --set /etc/cinder/cinder.conf lvm iscsi_protocol iscsicrudini --set /etc/cinder/cinder.conf lvm iscsi_helper lioadmcrudini --set /etc/cinder/cinder.conf DEFAULT glance_api_servers  http://$HOST_NAME:9292crudini --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp# 设置开机自启 并 重启服务systemctl enable openstack-cinder-volume.service target.servicesystemctl restart openstack-cinder-volume.service target.service        </code>    </pre></details>创建卷类型<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cinder --help | grep create   # 查看创建相关命令</span><br><span class="line">[root@controller ~]# cinder help type-create       # 查看创建卷类型相关参数</span><br><span class="line">[root@controller ~]# cinder type-create test --description &quot;the is test&quot;</span><br><span class="line">  卷类型名字                描述</span><br><span class="line">[root@controller ~]# cinder type-list       # 查看所有卷类型 </span><br><span class="line">[root@controller ~]# cinder type-show id/name      # 查看详情</span><br><span class="line">[root@controller ~]# cinder type-delete id/name    # 删除卷类型，前提是卷类型未在使用</span><br></pre></td></tr></table></figure><p>创建卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cinder list                  # 查看所有卷</span><br><span class="line">[root@controller ~]# cinder help create  # 查看创建相关命令</span><br><span class="line">[root@controller ~]# cinder create  --name test --volume-type llll 2 # 创建卷</span><br><span class="line">  卷名称            卷类型   卷大小</span><br><span class="line">[root@controller ~]# cinder show id/name          # 查看卷详情</span><br><span class="line">[root@controller ~]# cinder delete id/name        # 删除卷</span><br></pre></td></tr></table></figure><h5 id="Swift对象存储服务"><a href="#Swift对象存储服务" class="headerlink" title="Swift对象存储服务"></a>Swift对象存储服务</h5><p>​<a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=58">Swift简介</a></p><p>​Swift采用层次数据模型，共设三层逻辑结构：Account 、Container、Object (账户&#x2F;容器&#x2F;对象) 每层节点数均没有限制，可以任意扩展。账户即租户用户。Swift采用完全对称、面向资源的分布式系统架构设计,所有组件都可扩展,避免因单点失效而扩散并影响整个系统运转;通信方式采用非阻塞式1O模式,提高了系统吞吐和响应能力。</p><h6 id="Swift各组件："><a href="#Swift各组件：" class="headerlink" title="Swift各组件："></a>Swift各组件：</h6><p>​代理服务( Proxy Server) :<br>​对外提供对象服务AP,会根据环的信息来查找服务地址并转发用户请求至相应的账户、容器或者对象服务;由于釆用无状态的REST请求协议,可以进行横向扩展来均衡负载<br>​认证服务( Authentication Server) :<br>​验证访问用户的身份信息,并获得一个对象访问令牌( Token),在一定的时间内会一直有效验证访问令牌的有效性并缓存下来直至过期时间。<br>​缓存服务( Cache server) ：缓存的内容包括对象服务令牌,账户和容器的存在信息,但不会缓存对象本身的数据;缓存服务可采用 Memcached集群,Swt会使用一致性散列算法来分配缓存地址。<br>​账户服务( Account server) : 提供账户元数据和统计信息,并维护所含容器列表的服务,每个账户的信息被存储在一个 Sqlite数据库中。<br>​容器服务( Container server) : 提供容器元数据和统计信息,并维护所含对象列表的服务,每个容器的信息也存储在一个 Sqlite数据库中。<br>​对象服务( Object Server) : 提供对象元数据和内容服务,每个对象的内容会以文件的形式存储在文件系统中,元数据会作为文件属性来存储,建议采用支持扩展属性的XFS文件系统<br>​复制服务( Replicator) : 会检测本地分区副本和远程副本是否一致,具体是通过对比散列文件和高级水印来完成,发现不一致时会采用推式(Push)更新远程副本,例如对象复制服务会使用远程文件拷贝工具 rsync来同步.另外一个任务是确保被标记删除的对象从文件系统中移除。<br>​更新服务( Updater) : 当对象由于高负载的原因而无法立即更新时,任务将会被序列化到在本地文件系统中进行排队,以便服务恢复后进行异步更新;例如成功创建对象后容器服务器没有及时更新对象列表,这个时候容器的更新操作就会进入排队中,更新服务会在系统恢复正常后扫描队列并进行相应的更新处理<br>​审计服务( Auditor) : 检査对象,容器和账户的完整性,如果发现比特级的错误,文件将被隔离并复制其他的副本以覆盖本地损坏的副本;其他类型的错误会被记录到日志中<br>​账户清理服务( Account Reaper) : 移除被标记为删除的账户,删除其所包含的所有容器和对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# swift --help                # 帮助文档</span><br></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# swift post examcontainer    # 创建examcontainer容器</span><br><span class="line">[root@controller ~]# swift list # Swift命令查看容器</span><br><span class="line">examcontainer</span><br><span class="line">[root@controller ~]# openstack container list # openstack命令查看</span><br><span class="line">+---------------+</span><br><span class="line">| Name          |</span><br><span class="line">+---------------+</span><br><span class="line">| examcontainer |</span><br><span class="line">+---------------+</span><br><span class="line">[root@controller ~]# swift stat examcontainer    # 查看容器状态</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# swift capabilities         # 查看</span><br></pre></td></tr></table></figure><p>上传一个文件到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# swift help upload # 查询上传相关参数</span><br><span class="line">[root@controller ~]# swift upload examcontainer /root/test.txt# 上传一个文件到容器</span><br><span class="line">root/test.txt</span><br><span class="line">[root@controller ~]# swift list examcontainer# 查看容器内文件</span><br><span class="line">root/test.txt</span><br><span class="line">[root@controller ~]# swift list# 查看所有容器</span><br><span class="line">examcontainer</span><br><span class="line">test3</span><br><span class="line">[root@controller ~]# swift delete test3# 删除容器</span><br><span class="line">test3</span><br><span class="line">[root@controller ~]# swift delete examcontainer# 删除容器内有文件的容器</span><br><span class="line">root/test.txt</span><br><span class="line">root/test111.txt</span><br><span class="line">examcontainer</span><br><span class="line"></span><br><span class="line">[root@controller ~]# openstack --help | grep container# 查看容器相关操作</span><br><span class="line">[root@controller ~]# openstack container create test1 test2 test3# openstack命令创建多个容器</span><br><span class="line">[root@controller ~]# openstack container list # 查看所有容器</span><br><span class="line">[root@controller ~]# openstack object create test1 text.txt# 给容器上传文件</span><br><span class="line">[root@controller ~]# openstack object list test1# 查看容器内内容</span><br><span class="line">[root@controller ~]# openstack container delete -r test1 test2      # 强制删除多个，容器内有文件的话得强制删除</span><br></pre></td></tr></table></figure><h5 id="Heat编排服务"><a href="#Heat编排服务" class="headerlink" title="Heat编排服务"></a>Heat编排服务</h5><p>​<a href="https://www.bilibili.com/video/BV1Jq4y1M7GC?p=69">Heat简介</a> </p><p>​Heat是OpenStack的部署编排服务,是一套业务流程平台,旨在帮助用户更轻松地配置以 Open Stack为基础的云体系提供了一种通过模板定义的协同部署方式,通过模板驱动的引擎,允许应用开发人员使用提供的模板语言描述云环境的架构,并且以自动化的方式进行部署云计算资源Heat能够启动应用、创建虚拟机并自动处理整个流程</p><h6 id="Heat概念："><a href="#Heat概念：" class="headerlink" title="Heat概念："></a>Heat概念：</h6><p>​Stack(栈)在Heat领域, Stack是多个由Heat创建的对象或者资源的集合。它包含实例(虚拟机),网络,子网,路由,端口,路由端口,安全组( Security Group)安全组规则,自动伸缩等。</p><p>​Template(模板)Heat使用 template的概念来定义一个 Stack.如果你想要一个由私有网连接的2个实例,那么你的 template需要包括2个实例,一个网络,一个子网和2个网络端口的定义。既然 template是Hea中的核心</p><p>​Parameters(参数)Heat template有三个部分,而其中的一个就是要定义 template的参数。参数包含一些基本信息,比如具体的镜像ID,或者特定网络ID</p><p>​Resources(资源)Resource就是由Heat创建或者修改的具体的资源。它是 Heat template的第二个重要部分。</p><p>​Output(输出)Heat template的第三个和最后一个重要部分就是 Output(输出)。它是通过Open Stack Dashboard或者 Heat stack-list&#x2F; stack-show命令来显示给用户。</p><p>​HOT<br>​Heat Orchestration Template的缩写,是 Heat template使用的两种格式的种。HOT并不与 AWS Cloud Formation template格式兼容,只能被 Open Stack使用。HOT格式的 template,通常但不是必须使用YAML。</p><p>​CFN</p><p>​AWS Cloud Formation的缩写,Heat支持的第二种格式。CFN格式的template通常使用JsON( Javascript Object Notation是一种轻量级的数据交换格式) 。</p><h6 id="Heat的组件"><a href="#Heat的组件" class="headerlink" title="Heat的组件"></a>Heat的组件</h6><p>​Heat-api组件实现 Open Stack天然支持的 REST API。该组件通过把API请求经由AMQP传送给 Heat engine来处理API请求</p><p>​Heat-api-cfn组件提供兼容 AWS Cloud Formation的APl,同时也会把AP请求通过AMQP转发给 heat-engine</p><p>​Heat-engine组件提供Heat最主要的协作功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# heat service-list # 查看heat的服务列表信息、</span><br><span class="line">[root@controller ~]# heat resource-type-list    #（显示所有资源类型）</span><br><span class="line">[root@controller ~]# heat template-version-list# 查询heat模板的版本信息</span><br></pre></td></tr></table></figure><h5 id="libvirt"><a href="#libvirt" class="headerlink" title="libvirt"></a>libvirt</h5><p>在物理云平台查询云主机在KVM中的真实实例名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# virsh list                       # 查询</span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> ......</span><br><span class="line">[root@controller ~]# virsh shutdown 54      # 用domain-id 关闭主机</span><br><span class="line">Domain 54 is being shutdown</span><br><span class="line">virsh # reboot 55# 重启云主机</span><br><span class="line">Domain 55 is being rebooted</span><br></pre></td></tr></table></figure><p>vmware装的OpenStack平台虚拟机启动了进不去得去改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vi /etc/nova/nova.conf  # 用 &quot;/[libvirt]&quot;去找</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/f228459162c64f0991ebe11040201526.png" alt="libvirt"></p><p>改<code>virt_type</code>的参数，改完重启OpenStack的所有服务再去OpenStack平台上启动云主机就可以进去了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# systemctl restart openstack*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenStack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2021/10/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/10/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h5 id="dhclient-自动获取ip"><a href="#dhclient-自动获取ip" class="headerlink" title="dhclient 自动获取ip"></a>dhclient 自动获取ip</h5><h5 id="history-查看执行过的命令-c-用来清除命名记录"><a href="#history-查看执行过的命令-c-用来清除命名记录" class="headerlink" title="history 查看执行过的命令  -c 用来清除命名记录"></a>history 查看执行过的命令  -c 用来清除命名记录</h5><h5 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p a-&#123;1,2,3&#125; ---&gt; a-1 a-2 a-3</span><br><span class="line">mkdir -p a/&#123;1,2,3&#125; ---&gt; a --&gt; 1 2 3</span><br></pre></td></tr></table></figure><h5 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum makecache    # 将服务器上的包缓存到本地</span><br><span class="line">yum list pam*    # 列出以pam开头的软件</span><br><span class="line">yum update    # 更新所有软件</span><br><span class="line">yum upda package_name  # 仅更新指定的package</span><br><span class="line">yum remove    # 软件名卸载软件</span><br><span class="line">yum search 软件名  # 查询软件包</span><br><span class="line">yum install 软件包名    # 安装软件</span><br><span class="line">yum info 软件包名# 查询软件包信息,没安装的话查不到东西</span><br><span class="line">yum list       # 查询安装的rpm包</span><br><span class="line">yum clean all   # 清空缓存</span><br><span class="line">yum makecache          # 获取仓库缓存</span><br></pre></td></tr></table></figure><p>rpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -q name   # 查询name有没有安装</span><br><span class="line">rpm -qi name  # 查看name详情</span><br><span class="line">rpm -ql name  # 查询软件包在系统里安装的所有文件</span><br><span class="line">rpm -e name --nodeps  # --nodeps 强制卸载</span><br></pre></td></tr></table></figure><h5 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename创建了filename文件</span><br></pre></td></tr></table></figure><h5 id="cat-tac-more-查看文件内容"><a href="#cat-tac-more-查看文件内容" class="headerlink" title="cat  tac  more  查看文件内容"></a>cat  tac  more  查看文件内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -3 # 文件后三行</span><br><span class="line">tail -F 文件名   # 监控文件变化</span><br><span class="line">head -3文件名   # 查看前三行</span><br></pre></td></tr></table></figure><h5 id="find-查找命令"><a href="#find-查找命令" class="headerlink" title="find 查找命令"></a>find 查找命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name wenjainming  # 快速查找文件位置</span><br></pre></td></tr></table></figure><h5 id="软连接-类似于Windows系统中的快捷方式"><a href="#软连接-类似于Windows系统中的快捷方式" class="headerlink" title="软连接 - 类似于Windows系统中的快捷方式"></a>软连接 - 类似于Windows系统中的快捷方式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln  -s  [源文件或目录]  [目标文件或目录]    # 格式</span><br><span class="line">ln –s  ./a/test  ./b/hello# 示例</span><br></pre></td></tr></table></figure><p>它的作用是将当前路径下的a文件夹中的test文件，在当前路径的b文件夹中建立软连接，并且用一个新的名字为hello。<strong>路径尽量写绝对路径</strong> </p><h5 id="netstat查看当前网络状态"><a href="#netstat查看当前网络状态" class="headerlink" title="netstat查看当前网络状态"></a>netstat查看当前网络状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp # 查看端口情况</span><br><span class="line">netstat -r   # 查看核心路由表 等同于route命令</span><br></pre></td></tr></table></figure><h5 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h5><p>测试本机与目标ip地址是否能连通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.168.168</span><br></pre></td></tr></table></figure><h5 id="telnet命令"><a href="#telnet命令" class="headerlink" title="telnet命令"></a>telnet命令</h5><p>查看本机与目标ip的指定端口是否能连通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet -y 安装</span><br><span class="line">talent ip地址 端口</span><br><span class="line">talent 192.168.168.168 22</span><br></pre></td></tr></table></figure><h5 id="top-x2F-htop-状态监控"><a href="#top-x2F-htop-状态监控" class="headerlink" title="top &#x2F; htop 状态监控"></a>top &#x2F; htop 状态监控</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install htop    # htop安装</span><br></pre></td></tr></table></figure><h5 id="Speedtest测速-命令行"><a href="#Speedtest测速-命令行" class="headerlink" title="Speedtest测速 - 命令行"></a>Speedtest测速 - 命令行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.speedtest.net/app/cli/install.rpm.sh | bash</span><br><span class="line">yum install -y speedtest   # 安装speedtest</span><br></pre></td></tr></table></figure><h5 id="网卡配置文件-x2F-etc-x2F-sysconfig-x2F-network-scripts"><a href="#网卡配置文件-x2F-etc-x2F-sysconfig-x2F-network-scripts" class="headerlink" title="网卡配置文件 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts"></a>网卡配置文件 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[root@localhost]# </span><span class="language-bash"><span class="built_in">cat</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span> </span><br><span class="line">TYPE=Ethernet#网络类型</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=none #IP获取方式，有dhcp自动获取和静态IP（none/static）</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=451ec269-434b-4527-84a5-9306612f39aa</span><br><span class="line">DEVICE=ens33 # 驱动名称</span><br><span class="line">ONBOOT=yes   # yes为开机启动</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.16.112  # 设置静态IP地址</span><br><span class="line">NETMASK=255.255.255.0  # 子网掩码</span><br><span class="line">GATEWAY=192.168.16.1   # 网关</span><br><span class="line">DNS1=180.76.76.76   # DNS地址可以有多个单名称不能相同</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure><blockquote><p>重启网络服务 systemctl restart network</p></blockquote><h5 id="dd命令-文件夹下面所有文件拷贝成一个镜像文件"><a href="#dd命令-文件夹下面所有文件拷贝成一个镜像文件" class="headerlink" title="dd命令 文件夹下面所有文件拷贝成一个镜像文件"></a><a href="https://www.linuxcool.com/dd">dd命令</a> 文件夹下面所有文件拷贝成一个镜像文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd if=/路径 of=/路径/文件名  </span><br><span class="line">dd if=/dev/sr0 of=/root/centos7.ios</span><br></pre></td></tr></table></figure><h5 id="systemctl命令-–-管理系统服务"><a href="#systemctl命令-–-管理系统服务" class="headerlink" title="systemctl命令 – 管理系统服务"></a><a href="https://www.linuxcool.com/systemctl">systemctl命令 – 管理系统服务</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service#启用httpd服务</span><br><span class="line">systemctl stop httpd.service#停止httpd服务</span><br><span class="line">systemctl restart httpd.service#重启httpd服务</span><br><span class="line">systemctl status httpd.service#查看httpd服务状态</span><br><span class="line">systemctl enable httpd.service#设置httpd服务开机自启</span><br><span class="line">systemctl disaable httpd.service#设置httpd开机不自启</span><br><span class="line">systemctl list-units --type=httpd.service#列举所有已启动的服务(unit单元)</span><br></pre></td></tr></table></figure><h5 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a><a href="https://blog.csdn.net/qq_27870421/article/details/93165382?ops_request_misc=&request_id=&biz_id=102&utm_term=fire%E5%91%BD%E4%BB%A4&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-93165382.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">防火墙相关命令</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld#启动防火墙</span><br><span class="line">systemctl stop firewalld#关闭防火墙</span><br><span class="line">systemctl disable firewalld#禁用防火墙</span><br><span class="line">systemctl enable firewalld#开机自启防护墙</span><br><span class="line">systemctl status firewalld == firewall-cmd --state  #查看防火墙运行状态</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=443/tcp#打开443端口</span><br><span class="line">firewall-cmd --permanent --add-port=443/tcp #永久打开443端口</span><br><span class="line">firewall-cmd --list-all #查看防火墙，已开放的端口</span><br></pre></td></tr></table></figure><h5 id="主机间的相互免秘钥"><a href="#主机间的相互免秘钥" class="headerlink" title="主机间的相互免秘钥"></a>主机间的相互免秘钥</h5><p>生成公钥和私钥 发送给目标主机 即可实现 私钥公钥是唯一的每次生成都会不一致</p><h6 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h6 id="发送秘钥"><a href="#发送秘钥" class="headerlink" title="发送秘钥"></a>发送秘钥</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@目标主机地址</span><br></pre></td></tr></table></figure><h6 id="主机名与host校验"><a href="#主机名与host校验" class="headerlink" title="主机名与host校验"></a>主机名与host校验</h6><p>修改本机文件ssh_config 最后两行添加下列信息 就可以关闭ssh登录时得输入yes确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/ssh_config</span><br><span class="line"></span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure><h6 id="远程登录过后再次登录同一ip地址但是密钥不同的机器"><a href="#远程登录过后再次登录同一ip地址但是密钥不同的机器" class="headerlink" title="远程登录过后再次登录同一ip地址但是密钥不同的机器"></a>远程登录过后再次登录同一ip地址但是密钥不同的机器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R 服务器IP    # 清空已保存的密钥</span><br></pre></td></tr></table></figure><h5 id="服务器时间同步"><a href="#服务器时间同步" class="headerlink" title="服务器时间同步"></a>服务器时间同步</h5><p>date 显示时间</p><p>安装ntpdate</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">ntpdate cn.ntp.org.cn 同步网站\主机ip时间</span><br></pre></td></tr></table></figure><h5 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h5><p>配置文件位置vim &#x2F;etc&#x2F;sysonfig&#x2F;selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sestatus # 查看当前的SElinux状态</span><br></pre></td></tr></table></figure><h5 id="Windows和linux的文件传输方式"><a href="#Windows和linux的文件传输方式" class="headerlink" title="Windows和linux的文件传输方式"></a>Windows和linux的文件传输方式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz -y  安装lrzsz</span><br><span class="line"></span><br><span class="line">rz 将文件从Windows上传到linux</span><br><span class="line">sz fliename 将文件从linux上传到Windows</span><br></pre></td></tr></table></figure><h5 id="linux和linux内文件传输"><a href="#linux和linux内文件传输" class="headerlink" title="linux和linux内文件传输"></a>linux和linux内文件传输</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">传文件</span><br><span class="line">scp root@主机ip :文件路径 /拷贝到的路径</span><br><span class="line">scp root@192.168.168.168:/root/baidu.txt /root</span><br><span class="line"></span><br><span class="line">传文件夹</span><br><span class="line">scp -r root@主机ip :文件夹路径 /拷贝到的路径</span><br><span class="line">scp -r root@192.168.168.168:/root/baidu /root</span><br><span class="line"></span><br><span class="line">rsync 也可以用来传输</span><br></pre></td></tr></table></figure><h5 id="分区信息查询"><a href="#分区信息查询" class="headerlink" title="分区信息查询"></a>分区信息查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -h所有分区信息显示 按M显示 1M=1000kb</span><br><span class="line">df -h --max-depth=1 /etc 指定文件目录大小</span><br></pre></td></tr></table></figure><h5 id="文件压缩与解压"><a href="#文件压缩与解压" class="headerlink" title="文件压缩与解压"></a>文件压缩与解压</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar文件</span><br><span class="line"> 压缩 tar -zxvf 压缩包name 源文件路径 x(解压)v(过程)f(文件)c(压缩)</span><br><span class="line"> 解压 tar -zcf (压缩后的名字.tar.gz) 源文件路径</span><br><span class="line"> </span><br><span class="line">zip文件 yum install zip unzip -y</span><br><span class="line"> 压缩 zip -r 压缩文件名 源文件路径</span><br><span class="line"> 解压 unzip 压缩文件</span><br></pre></td></tr></table></figure><h5 id="vi-编辑器"><a href="#vi-编辑器" class="headerlink" title="vi 编辑器"></a>vi 编辑器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vi +8 ifcfg-ens33 定位到文件内第八行</span><br><span class="line">vi +  ifcfg-ens33 定位到文件内最后一行</span><br><span class="line"></span><br><span class="line">编辑模式下</span><br><span class="line">dd 删掉一行</span><br><span class="line">p  复制一行</span><br><span class="line">gg 跳转到首行 15gg跳转到第15行</span><br><span class="line">dd 删除当前位置的一行 </span><br><span class="line">3dd 从当前位置向下删除三行</span><br><span class="line">w 一个单词一个单词的跳转</span><br><span class="line">dw 从当前位置向后删除一个单词</span><br><span class="line">3dw 从当前位置向后删除三个单词</span><br><span class="line">yy  从当前位置向下复制一行 按p进行粘贴</span><br><span class="line">3yy 从当前位置向下复制三行 按p进行粘贴</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入模式</span><br><span class="line">I 当前行首    i 当前位置  </span><br><span class="line">A 跳转到行尾  a 跳转到当前字符后一个字符处  </span><br><span class="line">O 上添加一行  o 下添加一行 </span><br><span class="line"></span><br><span class="line">末行模式</span><br><span class="line">set nu  显示行号</span><br><span class="line">set nonu 取消显示行号</span><br><span class="line">:w  保存一次</span><br><span class="line">:wq 保存退出</span><br><span class="line">:q! 强制不保存退出</span><br><span class="line">:/a 查找a</span><br></pre></td></tr></table></figure><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名 会在 /home下创建同名目录和组</span><br></pre></td></tr></table></figure><h6 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名 按着提示重新设置密码</span><br></pre></td></tr></table></figure><h6 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名  级联删除/home下的目录和组</span><br><span class="line"></span><br><span class="line">userdel: user rskill is currently used by process 98238</span><br><span class="line">删除用户时报错可以进程正在使用是因为切换用户的时候未完全退出 使用exit退出即可在root用户下删除其他用户</span><br></pre></td></tr></table></figure><h6 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l </span><br></pre></td></tr></table></figure><h6 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root 切换到root 高级切换低级无需密码，低级切换高级相反</span><br></pre></td></tr></table></figure><h5 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h5><h6 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd rskill # 创建rskill组</span><br></pre></td></tr></table></figure><h6 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel rskill # 删除rskill组</span><br></pre></td></tr></table></figure><h6 id="修改组名"><a href="#修改组名" class="headerlink" title="修改组名"></a>修改组名</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n 新组名 旧组名 </span><br></pre></td></tr></table></figure><h6 id="查看用户对应的组"><a href="#查看用户对应的组" class="headerlink" title="查看用户对应的组"></a>查看用户对应的组</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups  # 不带用户名参数就是查看当前用户的组</span><br></pre></td></tr></table></figure><h6 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户名 组名 g--&gt;主组</span><br><span class="line">usermod -G 用户名 组名 G--&gt;附属组</span><br></pre></td></tr></table></figure><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><table><thead><tr><th align="center">权限项</th><th>写</th><th>读</th><th>执行</th><th>读</th><th>写</th><th>执行</th><th>读</th><th>写</th><th>执行</th></tr></thead><tbody><tr><td align="center">字符表示</td><td>w</td><td>r</td><td>x</td><td>r</td><td>w</td><td>x</td><td>r</td><td>w</td><td>x</td></tr><tr><td align="center">数字表示</td><td>2</td><td>4</td><td>1</td><td>4</td><td>2</td><td>1</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxrwx </span><br><span class="line">第一个rwx 是文件所有者的权限</span><br><span class="line">第二个rwx 是文件所属组用户的权限</span><br><span class="line">第三个rwx 是其他用户的权限</span><br></pre></td></tr></table></figure><h5 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h5><p>管道 |</p><p>作用: 把前面命令执行后的结果传递到‘’|‘’后面的命令</p><h5 id="重定向-‘’-gt-’’-’’-gt-gt-’’"><a href="#重定向-‘’-gt-’’-’’-gt-gt-’’" class="headerlink" title="重定向  ‘’&gt;’’ ,’’&gt;&gt;’’"></a>重定向  ‘’&gt;’’ ,’’&gt;&gt;’’</h5><p>作用: 改变数据输出的位置 有方式1 和方式2 两种 1是标准信息输出，2是错误信息输出</p><p>下方‘&gt;’替换成‘&gt;&gt;’即为追加到文件内，‘&gt;’为替换文件内的所有内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll / 1&gt; file.txt  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll / &gt; file.txt   #这里的方式1 &#x27;1&#x27;可以省略 标准输出</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /aaaaa 2&gt;file.txt #没有aaaaa的话会报错 方式二的话是吧错误信息输入到file.txt内</span><br></pre></td></tr></table></figure><h6 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /aaa &gt; file.txt 2&gt;&amp;1    # 不管打印输出信息对错都往file.txt 放</span><br></pre></td></tr></table></figure><h6 id="数据黑洞：处理掉无关紧要的终端打印输出信息"><a href="#数据黑洞：处理掉无关紧要的终端打印输出信息" class="headerlink" title="数据黑洞：处理掉无关紧要的终端打印输出信息"></a>数据黑洞：处理掉无关紧要的终端打印输出信息</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看aaa信息放到/dev/null内 因为/dev/null没有这个文件,所以放进去的都等于消失掉了</span><br><span class="line"></span><br><span class="line">ls /aaa &gt; /dev/null 2&gt;&amp;1  </span><br></pre></td></tr></table></figure><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><p>ps -ef</p><p>ps -aux 可以看CPU，内存使用率</p><h6 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 </span><br></pre></td></tr></table></figure><h6 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h6><p>​在命令后加 ’&amp;‘ 符号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baiud.com &gt;&gt; baidu.txt &amp;</span><br></pre></td></tr></table></figure><h6 id="jobs-l"><a href="#jobs-l" class="headerlink" title="jobs -l"></a>jobs -l</h6><p>​查看当前的后台进程，但只能查出当前窗口内的进程</p><h6 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h6><p>​可以防止后台进程被挂起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nohup ping www.baidu.com &gt;&gt; baidu.txt 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">2&gt;</span><span class="language-bash">&amp;1 是因为可能会有错误信息输出</span></span><br><span class="line">&amp;  后台进程</span><br></pre></td></tr></table></figure><h6 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kill -9 89501                       Running正在运行   killed 被杀掉的</span><br><span class="line"></span><br><span class="line">[root@master ~]# jobs -l</span><br><span class="line">[1]+ 98501 Running     ping www.baidu.com &gt;&gt; baidu.txt &amp;</span><br><span class="line">[root@master ~]# kill -9 98501</span><br><span class="line">[root@master ~]# jobs -l</span><br><span class="line">[1]+ 98501 Killed      ping www.baidu.com &gt;&gt; baidu.txt</span><br></pre></td></tr></table></figure><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>系统环境变量 —&gt; &#x2F;etc&#x2F;profile</p><p>用户环境变量—-&gt; .bash_profile</p><h6 id="修改配置文件后重新加载"><a href="#修改配置文件后重新加载" class="headerlink" title="修改配置文件后重新加载"></a>修改配置文件后重新加载</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h4><h5 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l </span><br></pre></td></tr></table></figure><p>再次插入磁盘或U盘能看到变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb4 /xxxx# 正常挂载上去</span><br></pre></td></tr></table></figure><p>挂载文件为ntfs的U盘<code>mount /dev/sdb1 /mnt</code> 此时报错（系统默认不支持该格式）mount: unknown filesystem type ‘ntfs’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc yum install ntfs-3g-devel.x86_64  # 安装依赖</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb1 /mnt   # 再次进行挂载</span><br></pre></td></tr></table></figure><h5 id="取消挂载"><a href="#取消挂载" class="headerlink" title="取消挂载"></a>取消挂载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdb1</span><br></pre></td></tr></table></figure><h5 id="挂载exFAT格式"><a href="#挂载exFAT格式" class="headerlink" title="挂载exFAT格式"></a>挂载exFAT格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount: unknown filesystem type ‘exfat 问题解决</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y exfat-utils fuse-exfat</span><br><span class="line">mount -t exfat /dev/sdbxxxxx /xxxxx</span><br></pre></td></tr></table></figure><h5 id="磁盘相关命令"><a href="#磁盘相关命令" class="headerlink" title="磁盘相关命令"></a>磁盘相关命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line">fdisk -l</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h5 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab </span><br></pre></td></tr></table></figure><h5 id="自动执行-crontab-x2F-cron"><a href="#自动执行-crontab-x2F-cron" class="headerlink" title="自动执行 crontab &#x2F; cron"></a>自动执行 crontab &#x2F; cron</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab crontab # 创建定时任务</span><br><span class="line">crontab -l  # 查看是否有定时任务</span><br><span class="line">crontab -e # 编辑（添加）定时任务</span><br><span class="line">crontab -r # 删除定时任务</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.linuxprobe.com/linux-timed-task.html">Linux定时任务</a></li></ul><h5 id="时间-x2F-时区"><a href="#时间-x2F-时区" class="headerlink" title="时间&#x2F;时区"></a>时间&#x2F;时区</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在centos7中设置时区的命令可以通过 timedatectl 命令来实现</span><br><span class="line">[root@linux-node ~]# timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h5 id="网卡重启失败"><a href="#网卡重启失败" class="headerlink" title="网卡重启失败"></a>网卡重启失败</h5><p>遇到的情况 装了个宝塔面板 强制关机 <code>改了运存</code> 再开机网卡就掉了。重启不了。</p><p>解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager &amp;&amp; service network restart</span><br></pre></td></tr></table></figure><p>主要原因：<strong>network与NetworkManager冲突导致</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 临时禁用</span><br><span class="line">/etc/init.d/NetworkManager stop    (centos6)</span><br><span class="line">service NetworkManager stop        (centos6)</span><br><span class="line">systemctl stop NetworkManager      (centos7)</span><br><span class="line"></span><br><span class="line">永久</span><br><span class="line">chkconfig NetworkManager off       (centos6)</span><br><span class="line">systemctl disable NetworkManager   (centos7)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 重启网卡</span><br><span class="line">service network restart（以centos 7为例）</span><br></pre></td></tr></table></figure><h5 id="screen-命令"><a href="#screen-命令" class="headerlink" title="screen 命令"></a>screen 命令</h5><p>​<strong>screen 是一个非常有用的<a href="https://www.linuxcool.com/">命令</a>，提供从单个 SSH 会话中使用多个 <a href="https://www.linuxcool.com/">shell</a> 窗口（会话）的能力。当会话被分离或网络中断时，screen 会话中启动的进程仍将运行，你可以随时重新连接到 screen 会话</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">screen -S name  # 这里的name可以随意 会新建一个窗口可以在里面执行命令要从当前的 screen 会话中分离，你可以按下Ctrl-A 和 d。所有的 screen 会话仍将是活跃的，你之后可以随时重新连接。</span><br><span class="line">screen -ls  # 查看所有会话</span><br><span class="line">screen -r   # 用于重新连接</span><br><span class="line">screen -r 7934 # 这里的数字是ls查出来的 .name前面的数字</span><br><span class="line">screen -r -S name # 也可以直接使用name进入会话</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止会话方法： 可以在会话内按下 Ctrl+c ，或者在命令行中使用 <span class="built_in">exit</span> 命令。(根据实际情况来，会话内运行的程序完全停止了的话，会话退出后将被终止)</span></span><br><span class="line">screen -X -S xxxx quit # xxxx为会话前面的数字编号(进程号)</span><br></pre></td></tr></table></figure><h5 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h5><p>​在下载文件的时候直接关闭远程登录窗口的话它任务还是一直在运行着的，并在当前目录下生成一个wget-log文件</p><p>​如果想查看下载进度的话可以对wget-log文件进行实时读取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -F wget-log</span><br></pre></td></tr></table></figure><p>​关于怎么停止 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="运行程序和脚本的时候按下-ctrl-c-和-ctrl-z-区别"><a href="#运行程序和脚本的时候按下-ctrl-c-和-ctrl-z-区别" class="headerlink" title="运行程序和脚本的时候按下  ctrl + c 和 ctrl + z  区别"></a>运行程序和脚本的时候按下  <code>ctrl + c</code> 和 <code>ctrl + z</code>  区别</h5><p>​<code>ctrl+c</code> 是终止命令的执行，而<code>ctrl+z</code>是把命令放到后台执行，使用 <code>fg</code> 可以把后台执行的程序调到前台来，也就是说 <code>ctrl+z</code>并没有终结命令</p><h5 id="使用root用户登录Linux系统后，在终端打开后显示”-bash-4-1-”"><a href="#使用root用户登录Linux系统后，在终端打开后显示”-bash-4-1-”" class="headerlink" title="使用root用户登录Linux系统后，在终端打开后显示”-bash-4.1#”"></a>使用root用户登录Linux系统后，在终端打开后显示”-bash-4.1#”</h5><p>可能是不小心把&#x2F;root下的文件删除了<code>.bash_profile</code>和<code>.bashrc</code></p><p>而这两个文件都会在&#x2F;etc&#x2F;skel模板目录下</p><p>将这两个文件复制到&#x2F;root下，使用reboot命令重启系统即可，(可以尝试重试ssh链接,<code>猜想</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/skel/.bash_profile /root</span><br><span class="line">cp /etc/skel/.bashrc /root</span><br></pre></td></tr></table></figure><h5 id="CentOS-7-系统备份与还原"><a href="#CentOS-7-系统备份与还原" class="headerlink" title="CentOS 7 系统备份与还原"></a><a href="http://t.csdn.cn/bVVd6">CentOS 7 系统备份与还原</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /   # 进入根目录</span><br><span class="line">tar -zcvpf centos7.tgz --exclude=/proc --exclude=/lost+found --exclude=/mnt --exclude=/sys --exclude=centos7.tgz /   # 打包所有根目录下的文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvpfz backup.tar.gz -C /    # 还原</span><br></pre></td></tr></table></figure><h5 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/reshat-release   # 查看系统版本 针对RedHat</span><br><span class="line">cat /etc/issue   # 查看系统版本 适用于所有Linux发行版本</span><br><span class="line"></span><br><span class="line">uname -a   # 查看系统内核</span><br><span class="line">cat /proc/version  # 查看系统内核</span><br></pre></td></tr></table></figure><h5 id="stress性能压测工具"><a href="#stress性能压测工具" class="headerlink" title="stress性能压测工具"></a>stress性能压测工具</h5><p><a href="https://blog.csdn.net/qq_34556414/article/details/106885472">https://blog.csdn.net/qq_34556414/article/details/106885472</a></p><p><a href="https://blog.csdn.net/supahero/article/details/107546176">https://blog.csdn.net/supahero/article/details/107546176</a></p><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# ping www.baidu.com</span><br><span class="line">ping: www.baidu.com: Name or service not known</span><br><span class="line"></span><br><span class="line">查看网卡配置文件内 dns 写法 “DNS1=”</span><br><span class="line">桥接方式的dns地址可以直接指向网关</span><br></pre></td></tr></table></figure><p><a href="http://rskill.vaiwan.com/">http://rskill.vaiwan.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
